use ::java::world::component::entity::LlamaVariant
use ::java::world::item::ItemStack
use ::java::util::slot::SlottedItem

dispatch minecraft:entity[llama] to struct Llama {
	...super::Breedable,
	/// Unknown use.
	/// Remains `0` even if it was bred.
	Bred?: boolean,
	/// Whether it is grazing.
	EatingHaystack?: boolean,
	/// Whether it has been tamed.
	Tame?: boolean,
	/// Higher values make it easier to tame.
	/// Increases with feeding.
	Temper?: int @ 0..100,
	/// Player who tamed it.
	#[until="1.16"]
	OwnerUUID?: #[uuid] string,
	/// Player who tamed the horse.
	#[since="1.16"] #[uuid]
	Owner?: int[] @ 4,
	/// Carpet decoration on its back.
	#[until="1.20.5"]
	DecorItem?: ItemStack,
	/// Whether it has a chest.
	ChestedHorse?: boolean,
	/// List of slots, scales with `Strength`.
	Items?: minecraft:llama_strength[[Strength]],
	/// Determines both the number of items it can carry and how likely it is for wolves to run away.
	Strength?: int @ 1..5,
	Variant?: LlamaVariant,
}

/// Slots from 0 to 2. Scales with `Strength`.
dispatch minecraft:llama_strength["1"] to ([SlottedItem<byte @ 0..2>] @ 0..3)

/// Slots from 0 to 5. Scales with `Strength`.
dispatch minecraft:llama_strength["2"] to ([SlottedItem<byte @ 0..5>] @ 0..6)

/// Slots from 0 to 8. Scales with `Strength`.
dispatch minecraft:llama_strength["3"] to ([SlottedItem<byte @ 0..8>] @ 0..9)

/// Slots from 0 to 11. Scales with `Strength`.
dispatch minecraft:llama_strength["4"] to ([SlottedItem<byte @ 0..11>] @ 0..12)

// TODO: Add "Slots from 0 to 14. Scales with `Strength`." doc here once we support numerical indexing of dispatches.
dispatch minecraft:llama_strength[%none, "5"] to ([SlottedItem<byte @ 0..14>] @ 0..15)

enum(int) LlamaVariantInt {
	Creamy = 0,
	White = 1,
	Brown = 2,
	Gray = 3,
}

dispatch minecraft:entity[trader_llama] to struct TraderLlama {
	...Llama,
	/// When it will despawn.
	DespawnDelay?: int,
}
