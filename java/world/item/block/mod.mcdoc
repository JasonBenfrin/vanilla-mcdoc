use ::java::world::component::item::AdventureModePredicate
use ::java::data::advancement::predicate::BlockPredicate
use ::java::util::block_state::BlockState

/// List of blocks that this block item can be placed on.
dispatch minecraft:data_component[can_place_on] to AdventureModePredicate

struct BlockEntityData {
	id: #[id="block_entity_type"] string,
	...minecraft:block_entity[[id]],
}

/// NBT that the block entity that is placed can have.
dispatch minecraft:data_component[block_entity_data] to (BlockEntityData | #[nbt=BlockEntityData] string)

/// Blockstate that the placed block will have.
dispatch minecraft:data_component[block_state] to mcdoc:block_item_states[[%parent.id]]

dispatch mcdoc:block_item_states[%unknown,%none] to struct {
	[string]: string,
}

type BlockItemComponents = (
	super::ItemBaseComponents |
	"block_entity_data" |
	"block_state" |
)

dispatch minecraft:item_component[%blockitem] to BlockItemComponents

/// An item that can be placed as a block
dispatch minecraft:item[%blockitem] to struct BlockItem {
	...super::ItemBase,
	BlockEntityTag?: BlockEntityData,
	/// Blockstate that the placed block will have.
	BlockStateTag?: mcdoc:block_item_states[[%parent.id]],
}
