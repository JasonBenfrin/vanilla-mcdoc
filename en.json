{
	"::java::assets::atlas::Unstitch.divisor_x": "If set to the resource width, regions will use pixel coordinates.",
	"::java::assets::atlas::Unstitch.divisor_y": "If set to the resource height, regions will use pixel coordinates.",
	"::java::assets::block_state_definition::BlockStateDefinitionMultipartEntry.when": "One condition or an array where at least one condition must apply.",
	"::java::assets::block_state_definition::ModelVariantBase.uvlock": "If set to `true`, the textures are not rotated with the block.",
	"::java::assets::credits::Credits.section": "Company segment.",
	"::java::assets::credits::CreditsCompanySegment.section": "Company segment.",
	"::java::assets::credits::CreditsJobTitle.names": "Employees with the title.",
	"::java::assets::equipment::Dyeable.color_when_undyed": "If specified, this layer will be tinted by the color contained in the `dyed_color` component.\nIf the item is not dyeable or not dyed, it will be tinted by this color.\nIf not specified and the item is not dyed, the layer will be hidden.",
	"::java::assets::equipment::Equipment.layers": "List of layers for each model layer type.",
	"::java::assets::equipment::Layer.dyeable": "Configures how this layer behaves when dyed (in the `#dyeable` item tag, and has the `dyed_color` component).",
	"::java::assets::equipment::Layer.texture": "Texture location for this layer, inside `entity/equipment/<layer>/`.",
	"::java::assets::equipment::WingsLayer.use_player_texture": "Whether this layer texture should be overridden by the player's custom elytra texture.\nDefaults to `false`.",
	"::java::assets::font::UnihexOverrideRange.from": "Minimum in codepoint range (inclusive).",
	"::java::assets::font::UnihexOverrideRange.left": "Position of left-most column of the glyph.",
	"::java::assets::font::UnihexOverrideRange.right": "Position of right-most column of the glyph.",
	"::java::assets::font::UnihexOverrideRange.to": "Maximum in codepoint range (inclusive).",
	"::java::assets::font::UnihexProvider.hex_file": "ZIP archive containing one or more *.hex files (files in archive with different extensions are ignored).",
	"::java::assets::font::UnihexProvider.size_overrides": "List of ranges to override the size of.",
	"::java::assets::item_definition::Chest.openness": "Defaults to `0`.",
	"::java::assets::item_definition::Compass.wobble": "Whether to oscillate for some time around target before settling. Defaults to true.",
	"::java::assets::item_definition::CompassTarget.Lodestone": "Points at the location stored in the `lodestone_tracker` component.",
	"::java::assets::item_definition::CompassTarget.None": "Always an invalid target.",
	"::java::assets::item_definition::CompassTarget.Recovery": "Points at the last player death location.",
	"::java::assets::item_definition::CompassTarget.Spawn": "Points at world spawn.",
	"::java::assets::item_definition::ConstantTint.value": "Constant tint color to apply.",
	"::java::assets::item_definition::Count.normalize": "If false, returns count clamped to `0..max_stack_size`.\nIf true, returns count divided by the `max_stack_size` component, clamped to `0..1`.\nDefaults to true.",
	"::java::assets::item_definition::CustomModelDataFlags.index": "The index of the `flags` list in the `custom_model_data` component. Defaults to 0.",
	"::java::assets::item_definition::CustomModelDataFloats.index": "The index of the `floats` list in the `custom_model_data` component. Defaults to 0.",
	"::java::assets::item_definition::CustomModelDataStrings.index": "The index of the `strings` list in the `custom_model_data` component. Defaults to 0.",
	"::java::assets::item_definition::CustomModelDataTint.default": "Tint to apply when the `custom_model_data` component is not present, or when it doesn't have a color in the specified index.",
	"::java::assets::item_definition::CustomModelDataTint.index": "The index of the `colors` list in the `custom_model_data` component. Defaults to 0.",
	"::java::assets::item_definition::Damage.normalize": "If false, returns value of damage, clamped to `0..max_damage`.\nIf true, returns value of damage divided by the `max_damage` component, clamped to `0..1`.\nDefaults to true.",
	"::java::assets::item_definition::DyeTint.default": "Tint to apply when the `dyed_color` component is not present.",
	"::java::assets::item_definition::FireworkTint.default": "Tint to apply when the `firework_explosion` component is not present.",
	"::java::assets::item_definition::HasComponent.ignore_default": "Whether the default components should be handled as \"no component\". Defaults to false.",
	"::java::assets::item_definition::Head.animation": "Controls the animation time for piglin and dragon heads. Defaults to `0`.",
	"::java::assets::item_definition::Head.texture": "Texture to use instead of the texture from `kind`.\nIf present, will ignore the `profile` compnent.",
	"::java::assets::item_definition::ItemDefinition.hand_animation_on_swap": "Whether the down-and-up animation should be played in first-person view when the item stack is changed.\nDefaults to `true`.",
	"::java::assets::item_definition::KeybindDown.keybind": "The keybind ID to check for.",
	"::java::assets::item_definition::LocalTime.locale": "Defaults to the root locale.\nExamples: `en_US`, `cs_AU@numbers=thai;calendar=japanese`.",
	"::java::assets::item_definition::LocalTime.pattern": "Format to use for time formatting.\nExamples: `yyyy-MM-dd`, `HH:mm:ss`.",
	"::java::assets::item_definition::LocalTime.time_zone": "Defaults to the timezone set on the client.\nExamples: `Europe/Stockholm`, `GMT+0:45`.",
	"::java::assets::item_definition::MapColorTint.default": "Tint to apply when the `map_color` component is not present.",
	"::java::assets::item_definition::PotionTint.default": "Tint to apply when the `potion_contents` component is not present, or it has no effects and no `custom_color` is set.",
	"::java::assets::item_definition::RangeDispatch.entries": "List of ranges. Will select last entry with threshold less or equal to value.\nOrder does not matter, list will be sorted by threshold in ascending order.",
	"::java::assets::item_definition::RangeDispatch.fallback": "Item model to render if no entries were less or equal to the value.",
	"::java::assets::item_definition::RangeDispatch.scale": "Factor to multiply the property value with. Defaults to 1.",
	"::java::assets::item_definition::Select.fallback": "Item model to render if none of the cases matched the value.",
	"::java::assets::item_definition::ShulkerBox.orientation": "Defaults to `up`.",
	"::java::assets::item_definition::Special.base": "Base model, providing transformations, particle texture and GUI light.",
	"::java::assets::item_definition::Special.model": "Renders a special hardcoded model.",
	"::java::assets::item_definition::TeamTint.default": "Tint to apply when there is no context entity, entity is not in a team or the team has no color.",
	"::java::assets::item_definition::Time.wobble": "Whether to oscillate for some time around target before settling. Defaults to true.",
	"::java::assets::item_definition::UseCycle.period": "returns remaining item use ticks modulo `period`.\nDefaults to 1.",
	"::java::assets::item_definition::UseDuration.remaining": "If true, returns remaining item use ticks.\nIf false, returns item use ticks so far.\nDefaults to false.",
	"::java::assets::lang::LangDeprecated.removed": "List of removed ranslation keys.",
	"::java::assets::lang::LangDeprecated.renamed": "Mapping renamed translation keys from old to new keys.",
	"::java::assets::model::ModelElementRotation.rescale": "Defaults to `false`.",
	"::java::assets::model::Predicates.HoneyLevel": "The honey level on bee nests and beehives.",
	"::java::assets::model::Predicates.Level": "The `level` block state on light items.",
	"::java::assets::model::Predicates.Throwing": "Whether the trident is being used.",
	"::java::assets::model::Predicates.Tooting": "Whether the goat horn is being used.",
	"::java::assets::regional_compliancies::Notification": "Region code.",
	"::java::assets::shader::program::Defines.flags": "Flags that will be injected as `#define <key>` at the top of the file.",
	"::java::assets::shader::program::Defines.values": "Values that will be injected as `#define <key> <value>` at the top of the file.",
	"::java::assets::shader::program::ShaderProgram.blend": "Unused.",
	"::java::assets::shader::program::ShaderProgram.defines": "Defines GLSL directives to be injected into the shader source.",
	"::java::assets::sounds::Sound.attenuation_distance": "Modify sound reduction rate based on distance. Defaults to 16.",
	"::java::assets::sounds::Sound.pitch": "Default is 1.0.",
	"::java::assets::sounds::Sound.preload": "Whether the sound should be loaded when loading the pack instead of when the sound is played. Used by the underwater ambience. Defaults to false.",
	"::java::assets::sounds::Sound.stream": "If true it will be streamed from its file. Sounds longer than a few seconds should enable this to avoid lag. Defaults to false.\nWhen false many instances of the sound can be ran at the same time. When true only allows 4 instances (of that type) can be played.",
	"::java::assets::sounds::Sound.type": "Changes how `name` is interpreted. Defaults to `sound`.",
	"::java::assets::sounds::Sound.volume": "Defaults to 1.0.",
	"::java::assets::sounds::Sound.weight": "Chance that this sound is selected to play. Defaults to 1.",
	"::java::assets::sounds::SoundEventRegistration.replace": "If true the sounds listed should replace the ones listed in the minecraft sounds.json for this sound event.\nFalse if the sounds listed should be added. If undefined. Defaults to false.",
	"::java::assets::sounds::SoundEventRegistration.sounds": "The sound files this sound event uses. One sound is randomly selected to play when the event is triggered. Defaults to assumed path.",
	"::java::assets::sounds::SoundEventRegistration.subtitle": "Translated as the subtitle when Show Subtitles is enabled. Section sign formatting codes are supported.",
	"::java::assets::sounds::SoundType.File": "A file.",
	"::java::assets::sounds::SoundType.SoundEvent": "An already defined event.",
	"::java::assets::texture_meta::ColormapTextureMeta.blur": "Causes the texture to blur when viewed from close up. Defaults to false.",
	"::java::assets::texture_meta::ColormapTextureMeta.clamp": "Causes the texture to stretch instead of tiling in cases where it otherwise would, such as on the shadow. Defaults to false.",
	"::java::assets::texture_meta::ColormapTextureMeta.mipmaps": "Custom mipmap values for the texture.",
	"::java::assets::texture_meta::GuiMeta.scaling": "Configures how the GUI texture should be scaled. Defaults to `stretch`.",
	"::java::assets::texture_meta::NineSlice.stretch_inner": "Defaults to `false`.",
	"::java::assets::texture_meta::TextureAnimation.frames": "Defaults to displaying all the frames from top to bottom.",
	"::java::assets::texture_meta::TextureAnimation.frames.index": "A number corresponding to position of a frame from the top, with the top frame being 0.",
	"::java::assets::texture_meta::TextureAnimation.frames.time": "The time in ticks to show this frame, overriding `frametime` above.",
	"::java::assets::texture_meta::TextureAnimation.frametime": "Sets the default time for each frame in increments of one game tick. Defaults to 1.",
	"::java::assets::texture_meta::TextureAnimation.height": "The height of the tile, as a direct ratio rather than in pixels. Can be used by resource packs to have frames that are not perfect squares.",
	"::java::assets::texture_meta::TextureAnimation.interpolate": "If true, additional frames will be generated between frames with a frame time greater than 1 between them. Defaults to false.",
	"::java::assets::texture_meta::TextureAnimation.width": "The width of the tile, as a direct ratio rather than in pixels. Can be used by resource packs to have frames that are not perfect squares.",
	"::java::assets::texture_meta::TextureAnimationFrame.index": "A number corresponding to position of a frame from the top, with the top frame being 0.",
	"::java::assets::texture_meta::TextureAnimationFrame.time": "The time in ticks to show this frame, overriding `frametime` above.",
	"::java::assets::texture_meta::TextureMeta.texture": "Only available for colormaps.",
	"::java::assets::texture_meta::TextureMeta.texture.blur": "Causes the texture to blur when viewed from close up. Defaults to false.",
	"::java::assets::texture_meta::TextureMeta.texture.clamp": "Causes the texture to stretch instead of tiling in cases where it otherwise would, such as on the shadow. Defaults to false.",
	"::java::assets::texture_meta::TextureMeta.texture.mipmaps": "Custom mipmap values for the texture.",
	"::java::assets::texture_meta::TextureMeta.villager": "Only available for villager textures.",
	"::java::assets::texture_meta::TextureMeta.villager.hat": "Determines whether the villager's 'profession' hat layer should allow the 'type' hat layer to render or not. If this mcmeta is undefined the default is used.",
	"::java::assets::texture_meta::VillagerTextureMeta.hat": "Determines whether the villager's 'profession' hat layer should allow the 'type' hat layer to render or not. If this mcmeta is undefined the default is used.",
	"::java::data::advancement::Advancement.criteria": "If `requirements` is not defined, all defined criteria will be required.",
	"::java::data::advancement::Advancement.display": "If present, advancement will be visible in the advancement tabs.",
	"::java::data::advancement::Advancement.parent": "If this field is absent, this advancement is a root advancement.\nCircular references cause a loading failure.",
	"::java::data::advancement::Advancement.requirements": "Contains all of the `criteria` keys.\nIf all criteria are required at once, this may be omitted.\nWith multiple criteria: this contains a list of lists with criteria (all criteria must be mentioned).\nIf all of the lists each have any criteria met, the advancement is complete (basically AND grouping of OR groups).",
	"::java::data::advancement::Advancement.rewards": "Provided to the player when this advancement is obtained.",
	"::java::data::advancement::Advancement.sends_telemetry_event": "Defaults to `false`. The vanilla game client only reads this for advancements from the `minecraft` namespace.",
	"::java::data::advancement::AdvancementCriterion.trigger": "Many triggers can occur multiple times, however, the reward will only be provided multiple times if the advancement is first revoked, which is often done within the function reward.",
	"::java::data::advancement::AdvancementDisplay.announce_to_chat": "Whether to announce in the chat when this advancement has been completed. Defaults to `true`.",
	"::java::data::advancement::AdvancementDisplay.background": "Used for the advancement tab (root advancement only).",
	"::java::data::advancement::AdvancementDisplay.frame": "Controls the advancement tile frame. Defaults to `task`.",
	"::java::data::advancement::AdvancementDisplay.hidden": "Whether or not to hide this advancement and all its children from the advancement screen,\nuntil this advancement have been completed.\nHas no effect on root advancements themselves, but still affects all their children.\nDefaults to `false`.",
	"::java::data::advancement::AdvancementDisplay.show_toast": "Whether to show the toast pop up after completing this advancement. Defaults to `true`.",
	"::java::data::advancement::AdvancementFrame.Challenge": "Fancy spiked border (used for the kill all mobs advancement).",
	"::java::data::advancement::AdvancementFrame.Goal": "Rounded border (used for the full beacon advancement).",
	"::java::data::advancement::AdvancementFrame.Task": "Normal border.",
	"::java::data::advancement::AdvancementRewards.experience": "XP to add.",
	"::java::data::advancement::AdvancementRewards.function": "Function to run as the player (not at). Function group tags are not allowed.",
	"::java::data::advancement::AdvancementRewards.loot": "Loot tables to give.",
	"::java::data::advancement::AdvancementRewards.recipes": "Recipes to unlock.",
	"::java::data::advancement::predicate::AxolotlVariant.Blue": "The rare variant.",
	"::java::data::advancement::predicate::DamagePredicate.blocked": "Whether the damage was successfully blocked.",
	"::java::data::advancement::predicate::DamagePredicate.dealt": "Amount of incoming damage before damage reduction.",
	"::java::data::advancement::predicate::DamagePredicate.source_entity": "Source of the damage (eg: a skeleton shooting an arrow or player igniting tnt).",
	"::java::data::advancement::predicate::DamagePredicate.taken": "Amount of incoming damage after damage reduction.",
	"::java::data::advancement::predicate::DamagePredicate.type": "The type of the damage source.",
	"::java::data::advancement::predicate::DamageSourcePredicate.direct_entity": "Direct entity responsible for the damage (eg: the arrow or tnt).",
	"::java::data::advancement::predicate::DamageSourcePredicate.is_direct": "Damage is direct when its direct and source entities are the same.",
	"::java::data::advancement::predicate::DamageSourcePredicate.source_entity": "Source of the damage (eg: a skeleton shooting an arrow or player igniting tnt).",
	"::java::data::advancement::predicate::DamageSourcePredicate.tags": "Damage type tags that the damage type is in.",
	"::java::data::advancement::predicate::DamageTagPredicate.expected": "Whether the damage is expected to have or not have the tag.",
	"::java::data::advancement::predicate::DamageTagPredicate.id": "The damage type tag to check.",
	"::java::data::advancement::predicate::EntityPredicate.movement_affected_by": "Whether the block at most 0.5 blocks below the entity is present which can affect its movement.",
	"::java::data::advancement::predicate::EntityPredicate.periodic_tick": "True every `n` ticks of an entity's lifetime.",
	"::java::data::advancement::predicate::EntityPredicate.targeted_entity": "The entity that a mob's AI/aggro is targeting.",
	"::java::data::advancement::predicate::LocationPredicate.can_see_sky": "Whether the location has the maximum possible level of sky light",
	"::java::data::advancement::predicate::LocationPredicate.light": "Calculated using: `max(sky-darkening, block)`.",
	"::java::data::advancement::predicate::LocationPredicate.smokey": "Whether the block is above (5 blocks or less) a campfire or soul campfire.",
	"::java::data::advancement::predicate::PlayerPredicate.input": "Checks the movement keys of the player.",
	"::java::data::advancement::predicate::PlayerPredicate.level": "Experience/XP level.",
	"::java::data::advancement::predicate::RabbitVariant.Evil": "Killer rabbit",
	"::java::data::advancement::predicate::TropicalFishPredicate.variant": "The pattern of the tropical fish.",
	"::java::data::advancement::trigger::BeeNestDestroyed.item": "Item used to break the block.",
	"::java::data::advancement::trigger::BeeNestDestroyed.num_bees_inside": "Number of bees that were inside the bee nest/beehive before it was broken.",
	"::java::data::advancement::trigger::ConstructBeacon.level": "Tier of the updated beacon base.",
	"::java::data::advancement::trigger::DefaultBlockUse.location": "The location of the block.",
	"::java::data::advancement::trigger::FishingRodHooked.entity": "Entity that was pulled.",
	"::java::data::advancement::trigger::FishingRodHooked.item": "Item that was caught.",
	"::java::data::advancement::trigger::FishingRodHooked.rod": "Fishing rod used.",
	"::java::data::advancement::trigger::InventoryChangedSlots.empty": "Amount of empty slots.",
	"::java::data::advancement::trigger::InventoryChangedSlots.full": "Amount of slots that are a full stack.",
	"::java::data::advancement::trigger::InventoryChangedSlots.occupied": "Amount of occupied slots.",
	"::java::data::advancement::trigger::ItemDurabilityChanged.delta": "Change in durability (negative numbers are used to indicate a decrease in durability).",
	"::java::data::advancement::trigger::ItemDurabilityChanged.durability": "The resulting durability.",
	"::java::data::advancement::trigger::ItemDurabilityChanged.item": "The item before its durability changed.",
	"::java::data::advancement::trigger::KilledByArrow.fired_from_weapon": "The weapon item that was used to fire the arrow.",
	"::java::data::advancement::trigger::KilledByArrow.unique_entity_types": "How many different types of entities were killed.",
	"::java::data::advancement::trigger::KilledByCrossbow.unique_entity_types": "How many different types of entities were killed.",
	"::java::data::advancement::trigger::NetherTravel.distance": "How far the player now is from the coordinate they started at in the Overworld before travelling.",
	"::java::data::advancement::trigger::NetherTravel.entered": "Where in the Overworld the player was when they travelled to the Nether.",
	"::java::data::advancement::trigger::NetherTravel.exited": "Where in the Nether the player was when they travelled back to the Overworld.",
	"::java::data::advancement::trigger::NetherTravel.start_position": "Where in the Overworld the player was when they travelled to the Nether.",
	"::java::data::advancement::trigger::PlacedBlock.item": "Item that was used to place the block before the item was consumed.",
	"::java::data::advancement::trigger::PlacedBlock.location": "Where the block was placed.",
	"::java::data::advancement::trigger::ShotCrossbow.item": "Crossbow that was used.",
	"::java::data::advancement::trigger::UsedEnderEye.distance": "Horizontal distance between the player and the stronghold.",
	"::java::data::advancement::trigger::VillagerTrade.item": "Item that was purchased. `count` tag checks the item count from one trade, not the total amount traded for.",
	"::java::data::damage_type::DamageEffects.Burning": "A single tick of burning hurt sound.",
	"::java::data::damage_type::DamageEffects.Drowning": "Drowing sound.",
	"::java::data::damage_type::DamageEffects.Freezing": "A single tick of freezing hurt sound.",
	"::java::data::damage_type::DamageEffects.Hurt": "Default hurt sound.",
	"::java::data::damage_type::DamageEffects.Poking": "Berry bush poke sound.",
	"::java::data::damage_type::DamageEffects.Thorns": "Thorns hurt sound.",
	"::java::data::damage_type::DamageScaling.Always": "Always scale with difficulty.",
	"::java::data::damage_type::DamageScaling.LivingNonPlayer": "Scale with difficulty if it was caused by a living entity who is not a player.",
	"::java::data::damage_type::DamageScaling.Never": "Always the same.",
	"::java::data::damage_type::DamageType.death_message_type": "Controls if special death message variants are used. Defaults to `default`.\n\nFor more info see: https://minecraft.wiki/w/Damage_type#Death_messages",
	"::java::data::damage_type::DamageType.effects": "Controls how damage manifests when inflicted on players. Defaults to `hurt`.",
	"::java::data::damage_type::DamageType.exhaustion": "Amount of hunger exhaustion to cause.",
	"::java::data::damage_type::DamageType.message_id": "The message id used for deaths caused by this damage type.\nIs combined with the result of `death_message_type` to form a translation key.",
	"::java::data::damage_type::DamageType.scaling": "Whether to scale damage with difficulty levels.",
	"::java::data::damage_type::DeathMessageType.Default": "Resulting translation key of `death.attack.` + message_id.",
	"::java::data::damage_type::DeathMessageType.FallVariants": "Resulting translation key of `death.attack.` + message_id.",
	"::java::data::damage_type::DeathMessageType.IntentionalGameDesign": "Resulting translation key of `death.attack.` + message_id + `.link`.",
	"::java::data::enchantment::AmmoUseEnchantmentEffect.effect": "Amount of ammunition being used up.",
	"::java::data::enchantment::AmmoUseEnchantmentEffect.requirements": "Predicate context: Item Parameters.",
	"::java::data::enchantment::ApplyMobEffectEntityEffect.to_apply": "If multiple mob effects are specified, a random effect is selected.",
	"::java::data::enchantment::AttributeEffect.amount": "Change in the attribute.",
	"::java::data::enchantment::AttributeEffect.id": "Used when equipping and unequipping the item to identify which modifier to add or remove from the entity.\n\nPostfixed with the slot name when the enchanted item is equipped.",
	"::java::data::enchantment::AttributeEffect.operation": "The attribute operation to use.",
	"::java::data::enchantment::BlockExperienceEnchantmentEffect.effect": "Amount of experience awarded.",
	"::java::data::enchantment::BlockExperienceEnchantmentEffect.requirements": "Predicate context: Item Parameters.",
	"::java::data::enchantment::ByCostEnchantmentProvider.cost": "Cost to use for the Enchanting process.",
	"::java::data::enchantment::ByCostWithDifficultyEnchantmentProvider.max_cost_span": "Span of the cost randomization when the special factor is at its maximum.",
	"::java::data::enchantment::ByCostWithDifficultyEnchantmentProvider.min_cost": "Positive integer representing the minimum possible cost",
	"::java::data::enchantment::ChangeItemDamageEffect.amount": "Damage to apply to the enchanted item. Negative values will repair the item.\nThe change is not applied to items held by players in creative mode.",
	"::java::data::enchantment::CrossbowChargeSoundsEnchantmentEffect.end": "End of charging.",
	"::java::data::enchantment::CrossbowChargeSoundsEnchantmentEffect.mid": "Middle of charging.",
	"::java::data::enchantment::CrossbowChargeSoundsEnchantmentEffect.start": "Start of charging.",
	"::java::data::enchantment::DamageEnchantmentEffect.effect": "Determines armor effectiveness; `0.0` for no effect, `1.0` for full effect.",
	"::java::data::enchantment::DamageEnchantmentEffect.requirements": "Predicate context: Damage Parameters.",
	"::java::data::enchantment::DamageEntityEffect.min_damage": "Amount of damage is randomized within the given min/max span.",
	"::java::data::enchantment::DamageImmunityEnchantmentEffect.effect": "Dummy value; this is a boolean effect.",
	"::java::data::enchantment::DamageImmunityEnchantmentEffect.requirements": "Predicate context: Damage Parameters.",
	"::java::data::enchantment::DamageItemEffect.amount": "Damage to apply to the enchanted item.\nThe damage is not applied to items held by players in creative mode.",
	"::java::data::enchantment::DamageProtectionEnchantmentEffect.effect": "Amount of damage being absorbed; as \"fake armor\".",
	"::java::data::enchantment::DamageProtectionEnchantmentEffect.requirements": "Predicate context: Damage Parameters.",
	"::java::data::enchantment::Enchantment.anvil_cost": "Halved when an Enchantment is added to a book.\nThe effective fee is multiplied by the level of the Enchantment.",
	"::java::data::enchantment::Enchantment.max_cost": "Maximum experience cost.",
	"::java::data::enchantment::Enchantment.max_level": "Maximum level of the enchantment.",
	"::java::data::enchantment::Enchantment.min_cost": "Minimum experience cost.",
	"::java::data::enchantment::Enchantment.primary_items": "Item types for which this Enchantment shows up in Enchanting Tables and on traded equipment.\n\nMust be a subset of `supported_items`.",
	"::java::data::enchantment::Enchantment.weight": "How commonly the Enchantment appears, compared to the total combined `weight` of all available Enchantments.",
	"::java::data::enchantment::EnchantmentCost.base": "Base cost at level 1.",
	"::java::data::enchantment::EnchantmentCost.per_level_above_first": "Cost increase per level above 1.",
	"::java::data::enchantment::EquipmentDropsEnchantmentEffect.effect": "Chance between `0.0` and `1.0` of an equipped piece dropping.",
	"::java::data::enchantment::EquipmentDropsEnchantmentEffect.enchanted": "Which subject needs to be enchanted for the effect to apply.",
	"::java::data::enchantment::EquipmentDropsEnchantmentEffect.requirements": "Predicate context: Damage Parameters.",
	"::java::data::enchantment::ExplodeEntityEffect.attribute_to_user": "Whether the explosion should be attributed to the user of the enchanted tool.",
	"::java::data::enchantment::ExplodeEntityEffect.block_interaction": "Whether the explosion has special effects on blocks.",
	"::java::data::enchantment::ExplodeEntityEffect.block_interaction.Block": "Drops items as if a block caused the explosion; `blockExplosionDropDecay` game rule applies.",
	"::java::data::enchantment::ExplodeEntityEffect.block_interaction.Mob": "Drops items as if a mob caused the explosion; `mobExplosionDropDecay` game rule applies.",
	"::java::data::enchantment::ExplodeEntityEffect.block_interaction.None": "No item drops or special behavior.",
	"::java::data::enchantment::ExplodeEntityEffect.block_interaction.TNT": "Drops items as if TNT caused the explosion; `tntExplosionDropDecay` game rule applies.",
	"::java::data::enchantment::ExplodeEntityEffect.block_interaction.Trigger": "Triggers redstone-activated blocks.",
	"::java::data::enchantment::ExplodeEntityEffect.create_fire": "Whether fire is placed within the explosion radius.",
	"::java::data::enchantment::ExplodeEntityEffect.damage_type": "If omitted, no damage is dealt by the explosion.",
	"::java::data::enchantment::ExplodeEntityEffect.immune_blocks": "List of Blocks or hash-prefixed Block Tag specifying which blocks fully block the explosion.",
	"::java::data::enchantment::ExplodeEntityEffect.knockback_multiplier": "If omitted, the default explosion knockback is applied.",
	"::java::data::enchantment::ExplodeEntityEffect.offset": "Relative coordinates to offset the explosion by. Defaults to `[0, 0, 0]`.",
	"::java::data::enchantment::FishingLuckBonusEnchantmentEffect.effect": "Amount of luck being added.",
	"::java::data::enchantment::FishingLuckBonusEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the player fishing.",
	"::java::data::enchantment::FishingTimeReductionEnchantmentEffect.effect": "Time reduction in seconds (higher values mean less time until a fish bites).",
	"::java::data::enchantment::FishingTimeReductionEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the player fishing.",
	"::java::data::enchantment::HitBlockEnchantmentEffect.effect": "On the entity hitting the Block",
	"::java::data::enchantment::HitBlockEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the entity hitting the Block, unless during a projectile attack, then, `this` is the projectile.",
	"::java::data::enchantment::IgniteEntityEffect.duration": "Seconds the fire should last.",
	"::java::data::enchantment::ItemDamageEnchantmentEffect.effect": "Amount of damage being dealt to the item.",
	"::java::data::enchantment::ItemDamageEnchantmentEffect.requirements": "Predicate context: Item Parameters.",
	"::java::data::enchantment::KnockbackEnchantmentEffect.effect": "Amount of knockback being applied.",
	"::java::data::enchantment::KnockbackEnchantmentEffect.requirements": "Predicate context: Damage Parameters.",
	"::java::data::enchantment::LinearLevelValue.base": "Base cost at level 1.",
	"::java::data::enchantment::LinearLevelValue.per_level_above_first": "Cost increase per level above 1.",
	"::java::data::enchantment::LocationChangedEnchantmentEffect.effect": "On the entity changing location.",
	"::java::data::enchantment::LocationChangedEnchantmentEffect.requirements": "Predicate context: Location Parameters.",
	"::java::data::enchantment::LookupLevelValue.fallback": "Applied if the level is greater than the size of `values`.",
	"::java::data::enchantment::LookupLevelValue.values": "Indexed by `level - 1` to apply, if present",
	"::java::data::enchantment::MobExperienceEnchantmentEffect.effect": "Amount of experience awarded.",
	"::java::data::enchantment::MobExperienceEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the killed mob.",
	"::java::data::enchantment::MultiplyEffectValue.factor": "Level-Based Value determining the factor to multiply in",
	"::java::data::enchantment::ParticlePosition.offset": "Defaults to 0.",
	"::java::data::enchantment::ParticlePosition.scale": "Defaults to 1.",
	"::java::data::enchantment::ParticleVelocity.base": "Defaults to 0.",
	"::java::data::enchantment::ParticleVelocity.movement_scale": "Scale factor applied to the given axis (`1` adds the velocity of the entity to the spawned particles). Defaults to 0.",
	"::java::data::enchantment::PostAttackEnchantmentEffect.effect": "Examples:\n- A Fire Aspect Enchant would specify that when the attacker is enchanted, the ignite effect is applied, and the affected party is the victim.\n- Thorns would specify that when the victim is enchanted, the damage_entity effect is applied, and the affected party is the attacker.",
	"::java::data::enchantment::PostAttackEnchantmentEffect.requirements": "Predicate context: Damage Parameters.",
	"::java::data::enchantment::ProjectileCountEnchantmentEffect.effect": "Amount of projectiles being loaded/drawn.",
	"::java::data::enchantment::ProjectileCountEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the entity drawing the weapon.",
	"::java::data::enchantment::ProjectilePiercingEnchantmentEffect.effect": "Amount of entities the projectile will pierce through before despawning.",
	"::java::data::enchantment::ProjectilePiercingEnchantmentEffect.requirements": "Predicate context: Item Parameters.\n\nTool is the ammunition item.",
	"::java::data::enchantment::ProjectileSpawnedEnchantmentEffect.effect": "On the newly spawned projectile.",
	"::java::data::enchantment::ProjectileSpawnedEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the newly spawned projectile.",
	"::java::data::enchantment::ProjectileSpreadEnchantmentEffect.effect": "Maximum spread of projectiles measured in degrees from the aim line.",
	"::java::data::enchantment::ProjectileSpreadEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the entity shooting the projectile.",
	"::java::data::enchantment::ReduceBinomialEffectValue.chance": "Chance that an input value is dropped by 1.\n\nThe span is 0 to 1, with 0 being no chance to drop an input value and 1 dropping all input values.",
	"::java::data::enchantment::RepairWithXpEnchantmentEffect.effect": "Amount of durability increase per experience point, `mending` uses 2x.",
	"::java::data::enchantment::RepairWithXpEnchantmentEffect.requirements": "Predicate context: Item Parameters.",
	"::java::data::enchantment::ReplaceBlockEntityEffect.offset": "Relative coordinates to offset the placed block by. Defaults to `[0, 0, 0]`.",
	"::java::data::enchantment::ReplaceBlockEntityEffect.predicate": "If omitted, all block types are replaced.",
	"::java::data::enchantment::ReplaceBlockEntityEffect.trigger_game_event": "Defaults to no game event dispatched.",
	"::java::data::enchantment::ReplaceDiskEntityEffect.offset": "Relative coordinates to offset the center of the cylinder by. Defaults to `[0, 0, 0]`.",
	"::java::data::enchantment::RunFunctionEntityEffect": "Runs an mcfunction as/at the entity.\n\nBecause of function call overhead, this is only useful for events, not for continuous effects, `@e[tag=...]` in that case.",
	"::java::data::enchantment::SetBlockPropertiesEntityEffect.offset": "Relative coordinates to offset the block by. Defaults to `[0, 0, 0]`.",
	"::java::data::enchantment::SetBlockPropertiesEntityEffect.trigger_game_event": "Defaults to no game event dispatched.",
	"::java::data::enchantment::SmashDamagePerBlockFallenEnchantmentEffect.effect": "Amount of damage dealt per block fallen.",
	"::java::data::enchantment::SmashDamagePerBlockFallenEnchantmentEffect.requirements": "Predicate context: Damage Parameters.",
	"::java::data::enchantment::SquaredLevelValue.added": "Added to the exponent; `0.0` for squared, `1.0` for cubed, `.5` for square root, `-4` for negpow(2), etc.",
	"::java::data::enchantment::SummonEntityEffect.entity": "If multiple entity types are specified, a random entity type is selected.",
	"::java::data::enchantment::SummonEntityEffect.join_team": "Whether the summoned entity should join the team of the owner of the Enchanted Item.",
	"::java::data::enchantment::TickEnchantmentEffect.effect": "On every tick. Performance recommendation: don't use with `run_function` unless necessary.",
	"::java::data::enchantment::TickEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the entity with the Enchanted Item.",
	"::java::data::enchantment::TridentReturnAccelerationEnchantmentEffect.effect": "Amount of acceleration applied to the returning trident.",
	"::java::data::enchantment::TridentReturnAccelerationEnchantmentEffect.requirements": "Predicate context: Entity Parameters.\n\n`this` is the trident entity.",
	"::java::data::loot::condition::AllOf.terms": "Passes when all of these conditions pass.",
	"::java::data::loot::condition::AnyOf.terms": "Passes when any of these conditions pass.",
	"::java::data::loot::condition::RandomChanceWithLooting.looting_multiplier": "Looting adjustment to the base success rate. Formula is `chance + (looting_level * looting_multiplier)` .",
	"::java::data::loot::condition::Reference.name": "A cyclic reference causes a parsing failure.",
	"::java::data::loot::condition::TableBonus.chances": "Probabilities for each enchantment level",
	"::java::data::loot::condition::TimeCheck.period": "Game tick supplied to `value` check gets modulo-divided by this.\nFor example, if set to 24000, `value` operates on a time period of days.",
	"::java::data::loot::condition::TimeCheck.value": "Check the current game tick.",
	"::java::data::loot::condition::ValueCheck.range": "Passes when `value` is within this range.",
	"::java::data::loot::DynamicDrops.Contents": "Drops the items in a shulker box.",
	"::java::data::loot::DynamicDrops.Sherds": "Drops the sherds of a decorated pot.",
	"::java::data::loot::function::AttributeModifier.attribute": "Attribute type to modify.",
	"::java::data::loot::function::AttributeModifier.id": "The unique identifier of this attribute modifier.",
	"::java::data::loot::function::AttributeModifier.operation": "The operation used for this modifier.",
	"::java::data::loot::function::AttributeModifier.slot": "If a list, one of the listed slots will be chosen randomly.",
	"::java::data::loot::function::CopyComponents.exclude": "Defaults to none.",
	"::java::data::loot::function::CopyComponents.include": "If omitted, all components present are included",
	"::java::data::loot::function::CopyNbtStrategy.Append": "Append to a list.",
	"::java::data::loot::function::CopyNbtStrategy.Merge": "Merge into a compound tag.",
	"::java::data::loot::function::CopyNbtStrategy.Replace": "Replace any existing contents of the target.",
	"::java::data::loot::function::EnchantedCountBase.count": "If the number is fractional the result is rounded *after* the number was multiplied by the looting level.",
	"::java::data::loot::function::EnchantedCountBase.limit": "Limits the count of the item to a range.",
	"::java::data::loot::function::EnchantedCountIncrease.enchantment": "Enchantment that increases yields.",
	"::java::data::loot::function::EnchantRandomly.enchantments": "If omitted, all enchantments applicable to the item are possible",
	"::java::data::loot::function::EnchantRandomly.only_compatible": "Whether to only enchant with item-compatible enchantments. Defaults to `true`.\n\nNote: Books are considered compatible with all Enchantments.",
	"::java::data::loot::function::EnchantRandomly.options": "The allowed enchantments. If omitted, all enchantments applicable to the item are possible.",
	"::java::data::loot::function::EnchantWithLevels.levels": "The levels to enchant this item with.",
	"::java::data::loot::function::EnchantWithLevels.options": "The allowed enchantments. If omitted, all enchantments applicable to the item are possible.",
	"::java::data::loot::function::EnchantWithLevels.treasure": "Whether treasure enchantments are allowed on this item.",
	"::java::data::loot::function::ExplorationMap.decoration": "The icon used to mark the destination on the map. Accepts any of the map icon text IDs (case insensitive).\nIf `mansion` or `monument` is used, the color of the lines on the item texture changes to match the corresponding explorer map.",
	"::java::data::loot::function::ExplorationMap.destination": "Generated structure to locate. Accepts any of the structure types used by the `/locate` command. Defaults to buried treasure.",
	"::java::data::loot::function::ExplorationMap.search_radius": "The size, in chunks, of the area to search for structures.\nThe area checked is square, not circular.\nRadius `0` causes only the current chunk to be searched, radius `1` causes the current chunk and eight adjacent chunks to be searched, and so on.\nDefaults to `50`.",
	"::java::data::loot::function::ExplorationMap.skip_existing_chunks": "Whether to not search in chunks that have already been generated. Defaults to `true`.",
	"::java::data::loot::function::ExplorationMap.zoom": "Defaults to 2.",
	"::java::data::loot::function::FillPlayerHead.entity": "`this` to use the entity that died or the player that gained the advancement, opened the container, or broke the block.",
	"::java::data::loot::function::Filtered.item_filter": "Item predicate to select items to modify.",
	"::java::data::loot::function::Filtered.modifier": "Loot function to apply to the selected items.",
	"::java::data::loot::function::InsertListOperation.offset": "The offset in the list to insert into. Defaults to 0.",
	"::java::data::loot::function::LimitCount.limit": "Limits the count of the item to a range.",
	"::java::data::loot::function::ListOperation.mode": "Determines how the existing list should be modified.",
	"::java::data::loot::function::ModifyContents.component": "Describes target component's items to modify.",
	"::java::data::loot::function::ModifyContents.modifier": "Applied to every item inside container.",
	"::java::data::loot::function::Reference.name": "Item modifier to reference.",
	"::java::data::loot::function::ReplaceSectionListOperation.offset": "The offset of the section to replace. Defaults to 0.",
	"::java::data::loot::function::ReplaceSectionListOperation.size": "The size of the section to replace. Defaults to size of the new list.",
	"::java::data::loot::function::Sequence.functions": "List of functions to apply to this item.",
	"::java::data::loot::function::SetAttributes.modifiers": "List of attribute modifiers to apply to this item.",
	"::java::data::loot::function::SetAttributes.replace": "Whether to replace existing attributes (otherwise append to existing). Defaults to `true`.",
	"::java::data::loot::function::SetBannerPattern.append": "Whether to add to the banner pattern list.",
	"::java::data::loot::function::SetBannerPattern.patterns": "List of banner pattern layers.",
	"::java::data::loot::function::SetBookCover.author": "If omitted, the original author is kept (or an empty string is used if there was no component)",
	"::java::data::loot::function::SetBookCover.generation": "If omitted, the original generation is kept (or 0 is used if there was no component)",
	"::java::data::loot::function::SetBookCover.title": "If omitted, the original title is kept (or an empty string is used if there was no component)",
	"::java::data::loot::function::SetContents.component": "Describes target component to be filled with items.",
	"::java::data::loot::function::SetCount.add": "Whether to add to the existing count. Defaults to `false`.",
	"::java::data::loot::function::SetCustomModelData.value": "Tag that describes the custom model an item will take.\nUsed by the `custom_model_data` model overrides predicate.\nHas certain restrictions due to float conversion.",
	"::java::data::loot::function::SetDamage.add": "Whether to add to the existing damage of the item. Defaults to `false`.",
	"::java::data::loot::function::SetDamage.damage": "Decimal percentage. Can be negative when used in combination with `add`.",
	"::java::data::loot::function::SetEnchantments.add": "Whether to add to the level of each enchantment. Defaults to `false`.",
	"::java::data::loot::function::SetEnchantments.enchantments": "A map of enchantments to levels. Setting an enchantment to `0` removes it from the item.",
	"::java::data::loot::function::SetFireworkExplosion.colors": "If omitted, the original colors are kept (or `[]` is used if there was no component).\nCalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::data::loot::function::SetFireworkExplosion.fade_colors": "If omitted, the original fade colors are kept (or `[]` is used if there was no component).\nCalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::data::loot::function::SetFireworkExplosion.shape": "If omitted, the original shape is kept (or `small_ball` is used if there was no component).",
	"::java::data::loot::function::SetFireworkExplosion.trail": "If omitted, the original `has_trail` value is kept (or `false` is used if there was no component).",
	"::java::data::loot::function::SetFireworkExplosion.twinkle": "If omitted, the original `has_twinkle` value is kept (or `false` is used if there was no component).",
	"::java::data::loot::function::SetFireworks.flight_duration": "If omitted, the flight duration of the item is left untouched - or set to 0 if the component did not exist before.",
	"::java::data::loot::function::SetInstrument.options": "Sets the instrument tag for a goat horn.",
	"::java::data::loot::function::SetLootTable.name": "The loot table to set to the container block item.",
	"::java::data::loot::function::SetLootTable.seed": "The container seed to use. Defaults to a random seed.",
	"::java::data::loot::function::SetLootTable.type": "The block entity type of the container.",
	"::java::data::loot::function::SetLore.entity": "The entity used to resolve the text components.",
	"::java::data::loot::function::SetLore.replace": "Whether to replace the existing lore list. Defaults to true.",
	"::java::data::loot::function::SetName.entity": "Specifies the entity to act as the target `@s` in the JSON text component.",
	"::java::data::loot::function::SetName.target": "Which name component to set. Defaults to `custom_name`.",
	"::java::data::loot::function::SetPotion.id": "The potion identifier.",
	"::java::data::loot::function::SetStewEffect.effects": "Sets the status effects for suspicious stew.",
	"::java::data::loot::function::SetWriteableBookPages.pages": "Sets the pages of a book and quill.",
	"::java::data::loot::function::SetWrittenBookPages.pages": "Sets the pages of a written book.",
	"::java::data::loot::function::StewEffect.duration": "The duration of this stew effect, in seconds.",
	"::java::data::loot::function::StewEffect.type": "The status effect of this stew effect.",
	"::java::data::loot::function::ToggleTooltips.toggles": "Toggles which tooltips are shown.",
	"::java::data::loot::TagPoolEntry.expand": "If `true`, drops a random item from the tag. If `false`, drops all items in the tag.",
	"::java::data::recipe::CraftingShaped.category": "Identifier for the category this goes in the recipe book.",
	"::java::data::recipe::CraftingShaped.group": "Identifier to group multiple recipes in the recipe book.",
	"::java::data::recipe::CraftingShaped.show_notification": "Determines if a notification is shown when unlocking this recipe. Defaults to true.",
	"::java::data::recipe::CraftingShapeless.category": "Identifier for the category this goes in the recipe book.",
	"::java::data::recipe::CraftingTransmute.category": "Identifier for the category this goes in the recipe book.",
	"::java::data::recipe::CraftingTransmute.input": "The ingredient that will transfer its data components to the result item.",
	"::java::data::recipe::CraftingTransmute.material": "An additional ingredient.",
	"::java::data::recipe::CraftingTransmute.result": "The result item that will be merged with the input ingredient.",
	"::java::data::recipe::OptionalSmithingIngredients.addition": "Material that will be used. (eg. `\"#minecraft:trim_materials\"`)",
	"::java::data::recipe::OptionalSmithingIngredients.base": "Ingredient specifying an item to be trimmed. (eg. `\"#minecraft:trimmable_armor\"`)",
	"::java::data::recipe::OptionalSmithingIngredients.template": "Template item that will be used for the pattern.",
	"::java::data::recipe::RequiredSmithingIngredients.addition": "Material that will be used. (eg. `{ \"tag\": \"minecraft:trim_materials\" }`)",
	"::java::data::recipe::RequiredSmithingIngredients.base": "Ingredient specifying an item to be trimmed. (eg. `{ \"tag\": \"minecraft:trimmable_armor\" }`)",
	"::java::data::recipe::RequiredSmithingIngredients.template": "Template item that will be used for the pattern.",
	"::java::data::recipe::Smelting.category": "Identifier for the category this goes in the recipe book.",
	"::java::data::recipe::SmithingIngredients.addition": "Material that will be used. (eg. `\"#minecraft:trim_materials\"`)",
	"::java::data::recipe::SmithingIngredients.base": "Ingredient specifying an item to be trimmed. (eg. `\"#minecraft:trimmable_armor\"`)",
	"::java::data::recipe::SmithingIngredients.template": "Template item that will be used for the pattern.",
	"::java::data::recipe::SmithingTransform.result": "Resulting transformed item.",
	"::java::data::structure::BlockPalette.palettes": "Sets of different block states used in the structure, a random palette gets selected based on coordinates.",
	"::java::data::structure::RandomizedPalette.palettes": "Sets of different block states used in the structure, a random palette gets selected based on coordinates.",
	"::java::data::structure::StructureNBT.DataVersion": "[Data version](https://minecraft.fandom.com/wiki/Data_version).",
	"::java::data::trial_spawner::TrialSpawnerConfig.items_to_drop_when_ominous": "Loot table to use when summoning ominous item spawners. One roll seeded based on rough location to determine all items used during the battle.",
	"::java::data::trial_spawner::TrialSpawnerConfig.loot_tables_to_eject": "Loot tables to use when ejecting loot. Chooses one loot table based on weight and then uses it as often as there are players nearby.",
	"::java::data::trial_spawner::TrialSpawnerConfig.simultaneous_mobs": "Number of entities that that can be present at once, when 1 player is nearby",
	"::java::data::trial_spawner::TrialSpawnerConfig.simultaneous_mobs_added_per_player": "Number added to `simultaneous_mobs` for each additional player",
	"::java::data::trial_spawner::TrialSpawnerConfig.spawn_potentials": "Entities that can be placed.",
	"::java::data::trial_spawner::TrialSpawnerConfig.spawn_range": "Maximum distance from the spawner that en entity can spawn",
	"::java::data::trial_spawner::TrialSpawnerConfig.ticks_between_spawn": "Ticks until the next spawn.",
	"::java::data::trial_spawner::TrialSpawnerConfig.total_mobs": "Total amount of entities that are spawned during one activation, when 1 player is nearby",
	"::java::data::trial_spawner::TrialSpawnerConfig.total_mobs_added_per_player": "Number added to `total_mobs` for each additional player",
	"::java::data::trim::TrimMaterial.asset_name": "ID which will be used in the resource pack.",
	"::java::data::trim::TrimMaterial.description": "Text displayed in the item tooltip.",
	"::java::data::trim::TrimMaterial.ingredient": "Item used in the smithing table for this material.",
	"::java::data::trim::TrimMaterial.item_model_index": "Model override predicate float.",
	"::java::data::trim::TrimMaterial.override_armor_materials": "Armor materials that should have a different color palette.",
	"::java::data::trim::TrimPattern.asset_id": "ID of the pattern that will be used in the resource pack as an overlay on the armor.",
	"::java::data::trim::TrimPattern.decal": "Whether the pattern texture will be masked based on the underlying armor. Defaults to `false`.",
	"::java::data::trim::TrimPattern.description": "Text displayed in the item tooltip.",
	"::java::data::trim::TrimPattern.template_item": "The item used in the smithing table for this pattern.",
	"::java::data::util::SoundEventRef": "Server sound events use a static registry, so can't be modified via data packs.\nCustom sound events can be defined inline, referencing a client sound_id.",
	"::java::data::util::SoundEventRef.range": "Range in blocks. If the player is further than this range from the source of the sound, the sound will be inaudible. If omitted, the sound will have a variable range.",
	"::java::data::util::WeightedSoundEvent.range": "Range in blocks. If the player is further than this range from the source of the sound, the sound will be inaudible. If omitted, the sound will have a variable range.",
	"::java::data::variants::banner_pattern::BannerPattern.asset_id": "Also resolves to `assets/<namespace>/textures/entity/shield/<name>.png`.",
	"::java::data::variants::banner_pattern::BannerPattern.translation_key": "Translation key prefix per dye color (e.g. `block.minecraft.banner.custom.pattern` resolves to `block.minecraft.banner.custom.pattern.<dye color>`).",
	"::java::data::variants::instrument::Instrument.range": "Maximum range in blocks that the sound can be heard",
	"::java::data::variants::instrument::Instrument.use_duration": "Duration of use in seconds, used as item cooldown",
	"::java::data::variants::jukebox_song::JukeboxSong.description": "Displayed in the HUD actionbar & item tooltip.",
	"::java::data::variants::painting::PaintingVariant.height": "Dimension in blocks.",
	"::java::data::variants::painting::PaintingVariant.width": "Dimension in blocks.",
	"::java::data::variants::pig::PigVariant.biomes": "Biomes in which this variant natually spawns.\nIf not specified, this variant will only be selected if no other variant matches the current biome.",
	"::java::data::worldgen::biome::Biome.depth": "Raises or lowers the terrain. Positive values are considered land and negative are oceans.",
	"::java::data::worldgen::biome::Biome.player_spawn_friendly": "If true, the world spawn will be preferred in this biome.",
	"::java::data::worldgen::biome::Biome.scale": "Vertically stretches the terrain. Lower values produce flatter terrain.",
	"::java::data::worldgen::biome::BiomeEffects.music_volume": "The volume of the music in this biome. Defaults to 1.\nThe game will smoothly transition between the current music volume and the new volume when entering the biome.",
	"::java::data::worldgen::dimension::DimensionType.bed_works": "If true, players can use beds to set their spawn and advance time. If false, beds will blow up when used.",
	"::java::data::worldgen::dimension::DimensionType.effects": "Sky effects.",
	"::java::data::worldgen::dimension::DimensionType.fixed_time": "Setting this value will keep the sun in a fixed position.",
	"::java::data::worldgen::dimension::DimensionType.has_ceiling": "Affects the weather, map items and respawning rules.",
	"::java::data::worldgen::dimension::DimensionType.has_raids": "If true, players with the Bad Omen effect can cause a raid.",
	"::java::data::worldgen::dimension::DimensionType.has_skylight": "Affects the weather, lighting engine and respawning rules.",
	"::java::data::worldgen::dimension::DimensionType.height": "The total height in which blocks can exist. Max Y = Min Y + Height.",
	"::java::data::worldgen::dimension::DimensionType.infiniburn": "Block tag defining what blocks keep fire infinitely burning.",
	"::java::data::worldgen::dimension::DimensionType.logical_height": "Portals can't spawn and chorus fruit can't teleport players above this height.",
	"::java::data::worldgen::dimension::DimensionType.min_y": "The minimum height in which blocks can exist.",
	"::java::data::worldgen::dimension::DimensionType.natural": "If true, portals will spawn zombified piglins. If false, compasses and clocks spin randomly.",
	"::java::data::worldgen::dimension::DimensionType.piglin_safe": "If false, piglins will shake and convert to zombified piglins.",
	"::java::data::worldgen::dimension::DimensionType.respawn_anchor_works": "If true, players can charge and use respawn anchors to set their spawn. If false, respawn anchors will blow up when used.",
	"::java::data::worldgen::dimension::DimensionType.ultrawarm": "If true, water will evaporate and sponges will dry.",
	"::java::data::worldgen::feature::block_predicate::PredicateOffset.offset": "The block offset to check.",
	"::java::data::worldgen::feature::DripstoneClusterConfig.max_stalagmite_stalactite_height_diff": "Max height difference between the stalagmite and stalactite.",
	"::java::data::worldgen::feature::FossilConfig.max_empty_corners_allowed": "If more corners are exposed to air, feature placement is cancelled.",
	"::java::data::worldgen::feature::GeodeBlockSettings.cannot_replace": "Blocks that will not be replaced by the geode.",
	"::java::data::worldgen::feature::GeodeBlockSettings.invalid_blocks": "When encountering an invalid block, feature placement is cancelled.",
	"::java::data::worldgen::feature::ModernPatchConfig.xz_spread": "Defaults to 7.",
	"::java::data::worldgen::feature::ModernPatchConfig.y_spread": "Defaults to 3.",
	"::java::data::worldgen::feature::OreConfig.discard_chance_on_air_exposure": "Chance that feature placement will be discarded if the ore is exposed to air blocks.",
	"::java::data::worldgen::feature::placement::FixedPlacementModifier.positions": "Fixed list of block positions to place the feature at.",
	"::java::data::worldgen::feature::RandomPatchConfig.tries": "How many attempts will be made to find a placement. Defaults to 128.",
	"::java::data::worldgen::feature::RandomPatchConfig.xz_spread": "Defaults to 7.",
	"::java::data::worldgen::feature::RandomPatchConfig.y_spread": "Defaults to 3.",
	"::java::data::worldgen::feature::SimpleBlockConfig.schedule_tick": "Whether to schedule a block update. Defaults to `false`.",
	"::java::data::worldgen::feature::tree::PlaceOnGroundTreeDecorator.block_state_provider": "The block to place on the ground.",
	"::java::data::worldgen::feature::tree::PlaceOnGroundTreeDecorator.height": "Defaults to `1`.",
	"::java::data::worldgen::feature::tree::PlaceOnGroundTreeDecorator.radius": "Defaults to `2`.",
	"::java::data::worldgen::feature::tree::PlaceOnGroundTreeDecorator.tries": "Defaults to `128`.",
	"::java::data::worldgen::noise_settings::NoiseGeneratorSettings.bedrock_roof_position": "Relative position of the bedrock roof starting at the world height. Higher numbers move the roof down.",
	"::java::data::worldgen::noise_settings::NoiseGeneratorSettings.disable_mob_generation": "If true, mobs will not spawn during generation.",
	"::java::data::worldgen::noise_settings::NoiseSettings.bottom_slide": "Adds or removes terrain at the bottom of the world. Does nothing when size is 0.",
	"::java::data::worldgen::noise_settings::NoiseSettings.height": "The total height where blocks can generate. Max Y = Min Y + Height.",
	"::java::data::worldgen::noise_settings::NoiseSettings.island_noise_override": "If true, terrain will be shaped like islands similar to the end.",
	"::java::data::worldgen::noise_settings::NoiseSettings.min_y": "Minimum height where blocks start generating.",
	"::java::data::worldgen::noise_settings::NoiseSettings.top_slide": "Adds or removes terrain at the top of the world. Does nothing when size is 0.",
	"::java::data::worldgen::noise_settings::NoiseSlideSettings.offset": "Defines an range of 'Offset * Size vertical * 4' blocks where the density is set to the target.",
	"::java::data::worldgen::noise_settings::NoiseSlideSettings.size": "Defines a range of 'Size * Size vertical * 4' blocks where the existing density and target are interpolated.",
	"::java::data::worldgen::noise_settings::NoiseSlideSettings.target": "The target density. Positive values add terrain and negative values remove terrain.",
	"::java::data::worldgen::structure_set::RandomSpreadPlacement.separation": "Minimum distance in chunks between two structures of this type.",
	"::java::data::worldgen::structure_set::RandomSpreadPlacement.spacing": "Average distance in chunks between two structures of this type.",
	"::java::data::worldgen::structure::Structure.adapt_noise": "Whether to add extra terrain below the structure.",
	"::java::data::worldgen::structure::Structure.step": "The step when the structure generates.",
	"::java::server::util::attribute::AttributeOperation.AddMultipliedBase": "Multiplies the current value of the attribute by `(1 + x)`,\nwhere `x` is the sum of the modifiers' amounts.",
	"::java::server::util::attribute::AttributeOperation.AddMultipliedTotal": "For every modifier, multiplies the current value of the attribute by `(1 + x)`,\nwhere `x` is the amount of the particular modifier.",
	"::java::server::util::attribute::AttributeOperation.AddValue": "Adds all of the modifiers' amounts to the current value of the attribute.",
	"::java::server::util::attribute::LegacyOperation.Additive": "aka. `add_value`. Adds all of the modifiers' amounts to the current value of the attribute.",
	"::java::server::util::attribute::LegacyOperation.Multiplicative": "aka. `add_multiplied_base`. Multiplies the current value of the attribute by (1 + x),\nwhere x is the sum of the modifiers' amounts.",
	"::java::server::util::attribute::LegacyOperation.Percentage": "aka. `add_multiplied_total`. For every modifier, multiplies the current value of the attribute by (1 + x),\nwhere x is the amount of the particular modifier.\nFunctions the same as Operation 1 if there is only a single modifier with operation 1 or 2.\nHowever, for multiple modifiers it will multiply the modifiers rather than adding them",
	"::java::server::util::banner_pattern::BannerPattern.Border": "Border (Bordure)",
	"::java::server::util::banner_pattern::BannerPattern.BottomLeftCorner": "Bottom Left Corner (Base dexter canton)",
	"::java::server::util::banner_pattern::BannerPattern.BottomRightCorner": "Bottom Right Corner (Base sinister canton)",
	"::java::server::util::banner_pattern::BannerPattern.BottomStripe": "Bottom Stripe (Base)",
	"::java::server::util::banner_pattern::BannerPattern.BottomTriangle": "Bottom Triangle (Chevron)",
	"::java::server::util::banner_pattern::BannerPattern.BottomTriangleSawtooth": "Bottom Triangle Sawtooth (Base indented)",
	"::java::server::util::banner_pattern::BannerPattern.Brick": "Brick (Field masoned)",
	"::java::server::util::banner_pattern::BannerPattern.CenterStripeVertical": "Center Stripe (Vertical) (Pale)",
	"::java::server::util::banner_pattern::BannerPattern.Creeper": "Creeper (Creeper charge)",
	"::java::server::util::banner_pattern::BannerPattern.CurlyBorder": "Curly Border (Bordure indented)",
	"::java::server::util::banner_pattern::BannerPattern.DiagonalCross": "Diagonal Cross (Saltire)",
	"::java::server::util::banner_pattern::BannerPattern.DownLeftStripe": "Down Left Stripe (Bend sinister)",
	"::java::server::util::banner_pattern::BannerPattern.DownRightStripe": "Down Right Stripe (Bend)",
	"::java::server::util::banner_pattern::BannerPattern.Flower": "Flower (Flower charge)",
	"::java::server::util::banner_pattern::BannerPattern.Globe": "Globe (Globe)",
	"::java::server::util::banner_pattern::BannerPattern.Gradient": "Gradient (Gradient)",
	"::java::server::util::banner_pattern::BannerPattern.GradientUpsideDown": "Gradient upside-down (Base gradient)",
	"::java::server::util::banner_pattern::BannerPattern.HorizontalHalfBottom": "Horizontal Half (bottom) (Per fess inverted)",
	"::java::server::util::banner_pattern::BannerPattern.HorizontalHalfTop": "Horizontal Half (top) (Per fess)",
	"::java::server::util::banner_pattern::BannerPattern.LeftOfDiagonal": "Left of Diagonal (Per bend sinister)",
	"::java::server::util::banner_pattern::BannerPattern.LeftOfUpsideDownDiagonal": "Left of upside-down Diagonal (Per bend inverted)",
	"::java::server::util::banner_pattern::BannerPattern.LeftStripe": "Left Stripe (Pale dexter)",
	"::java::server::util::banner_pattern::BannerPattern.MiddleCircle": "Middle Circle (Roundel)",
	"::java::server::util::banner_pattern::BannerPattern.MiddleRhombus": "Middle Rhombus (Lozenge)",
	"::java::server::util::banner_pattern::BannerPattern.MiddleStripeHorizontal": "Middle Stripe (Horizontal) (Fess)",
	"::java::server::util::banner_pattern::BannerPattern.Mojang": "Mojang (Thing)",
	"::java::server::util::banner_pattern::BannerPattern.Piglin": "Piglin (Piglin)",
	"::java::server::util::banner_pattern::BannerPattern.RightOfDiagonal": "Right of Diagonal (Per bend sinister inverted)",
	"::java::server::util::banner_pattern::BannerPattern.RightOfUpsideDownDiagonal": "Right of upside-down Diagonal (Per bend)",
	"::java::server::util::banner_pattern::BannerPattern.RightStripe": "Right Stripe (Pale sinister)",
	"::java::server::util::banner_pattern::BannerPattern.Skull": "Skull (Skull charge)",
	"::java::server::util::banner_pattern::BannerPattern.SmallVerticalStripes": "Small (Vertical) Stripes (Paly)",
	"::java::server::util::banner_pattern::BannerPattern.SquareCross": "Square Cross (Cross)",
	"::java::server::util::banner_pattern::BannerPattern.TopLeftCorner": "Top Left Corner (Chief dexter canton)",
	"::java::server::util::banner_pattern::BannerPattern.TopRightCorner": "Top Right Corner (Chief sinister canton)",
	"::java::server::util::banner_pattern::BannerPattern.TopStripe": "Top Stripe (Chief)",
	"::java::server::util::banner_pattern::BannerPattern.TopTriangle": "Top Triangle (Inverted chevron)",
	"::java::server::util::banner_pattern::BannerPattern.TopTriangleSawtooth": "Top Triangle Sawtooth (Chief indented)",
	"::java::server::util::banner_pattern::BannerPattern.VerticalHalfLeft": "Vertical Half (left) (Per pale)",
	"::java::server::util::banner_pattern::BannerPattern.VerticalHalfRight": "Vertical Half (right) (Per pale inverted)",
	"::java::server::util::effect::EffectByteId": "Numerical ids for effects",
	"::java::server::util::effect::MobEffectInstance.ambient": "Whether the effect appears as a HUD icon in addition to in the inventory GUI (same behavior as beacons when `true`). Defaults to `false`.",
	"::java::server::util::effect::MobEffectInstance.Ambient": "Whether particles are semi-transparent. (like with a Beacon)",
	"::java::server::util::effect::MobEffectInstance.amplifier": "Level I having value 0. Defaults to 0.",
	"::java::server::util::effect::MobEffectInstance.duration": "Duration of the effect in ticks. Infinite is represented by `-1`.",
	"::java::server::util::effect::MobEffectInstance.Duration": "Duration of the effect in ticks. Infinite is represented by `-1`.",
	"::java::server::util::effect::MobEffectInstance.hidden_effect": "A lower amplifier effect of the same type.",
	"::java::server::util::effect::MobEffectInstance.HiddenEffect": "A lower amplifier effect of the same type.",
	"::java::server::util::effect::MobEffectInstance.show_icon": "Whether the effect appears in the inventory GUI. Defaults to `true`",
	"::java::server::util::effect::MobEffectInstance.show_particles": "Defaults to `true`.",
	"::java::server::util::effect::MobEffectInstance.ShowIcon": "Whether the effect icon should be shown.",
	"::java::server::util::effect::MobEffectInstance.ShowParticles": "Whether particles should be shown.",
	"::java::server::util::effect::ModernMobEffect.ambient": "Whether the effect appears as a HUD icon in addition to in the inventory GUI (same behavior as beacons when `true`). Defaults to `false`.",
	"::java::server::util::effect::ModernMobEffect.amplifier": "Level I having value 0. Defaults to 0.",
	"::java::server::util::effect::ModernMobEffect.duration": "Duration of the effect in ticks. Infinite is represented by `-1`.",
	"::java::server::util::effect::ModernMobEffect.hidden_effect": "A lower amplifier effect of the same type.",
	"::java::server::util::effect::ModernMobEffect.show_icon": "Whether the effect appears in the inventory GUI. Defaults to `true`",
	"::java::server::util::effect::ModernMobEffect.show_particles": "Defaults to `true`.",
	"::java::server::util::effect::OldMobEffect.Ambient": "Whether particles are semi-transparent. (like with a Beacon)",
	"::java::server::util::effect::OldMobEffect.Duration": "Duration of the effect in ticks. Infinite is represented by `-1`.",
	"::java::server::util::effect::OldMobEffect.HiddenEffect": "A lower amplifier effect of the same type.",
	"::java::server::util::effect::OldMobEffect.ShowIcon": "Whether the effect icon should be shown.",
	"::java::server::util::effect::OldMobEffect.ShowParticles": "Whether particles should be shown.",
	"::java::server::util::Filterable.filtered": "Shown only to players with chat filtering enabled.",
	"::java::server::util::FilteredText.filtered": "Shown only to players with chat filtering enabled.",
	"::java::server::util::game_event::BlockPositionSource.pos": "Block position",
	"::java::server::util::game_event::EntityPositionSource.y_offset": "offset from the entity's feet to the source position",
	"::java::server::util::game_event::ReceivingEvent.distance": "Distance in blocks to the source",
	"::java::server::util::game_event::ReceivingEvent.pos": "Origin of the event",
	"::java::server::util::game_event::ReceivingEvent.projectile_owner": "UUID of the owner of the projectile, if one exists",
	"::java::server::util::game_event::ReceivingEvent.source": "UUID of the source entity of the event, if one exists",
	"::java::server::util::game_event::VibrationListener.event": "Event that is being received, if any",
	"::java::server::util::game_event::VibrationListener.event_delay": "Delay in ticks until the event reaches this listener",
	"::java::server::util::game_event::VibrationListener.event_distance": "Distance in blocks to the event that is being received",
	"::java::server::util::game_event::VibrationListener.range": "Range in blocks where vibrations can be detected",
	"::java::server::util::global_pos::GlobalPos.dimension": "Dimension of the location",
	"::java::server::util::global_pos::GlobalPos.pos": "Coordinates of the location in [x, y, z]",
	"::java::server::util::inventory::InventoryItem": "@deprecated",
	"::java::server::util::inventory::SlottedItem.Slot": "Inventory slot the item is in",
	"::java::server::util::memory::AdmiringDisable.value": "Whether the piglin cannot admire an item.\nSet when converting, when attacked, or when admiring an item.",
	"::java::server::util::memory::AdmiringItem.value": "Whether the piglin is currently admiring an item.",
	"::java::server::util::memory::AngryAt.value": "The target of the piglin or piglin brute.",
	"::java::server::util::memory::BreezeJumpCooldown.value": "If present, the breeze will not long jump or slide. Set after performing a long jump.",
	"::java::server::util::memory::BreezeJumpInhaling.value": "If present, the breeze will not long jump or shoot a wind charge when stuck.",
	"::java::server::util::memory::BreezeJumpTarget.value": "The block position that the breeze is jumping towards.",
	"::java::server::util::memory::BreezeLeavingWater.value": "If present, the breeze is in water.",
	"::java::server::util::memory::BreezeShoot.value": "If present, the breeze is able to shoot a wind charge, and will not long jump or slide.",
	"::java::server::util::memory::BreezeShootCharging.value": "If present, the breeze will not shoot a wind charge. Set when starting to shoot.",
	"::java::server::util::memory::BreezeShootCooldown.value": "If present, the breeze will not shoot a wind charge. Set after shooting",
	"::java::server::util::memory::BreezeShootRecover.value": "If present, the breeze will not shoot a wind charge.",
	"::java::server::util::memory::DangerDetectedRecently.value": "Whether the armadillo has detected danger recently.",
	"::java::server::util::memory::DigCooldown.value": "If present, the warden will not dig down.",
	"::java::server::util::memory::ExpirableValue.ttl": "If present, ticks before this memory is automatically removed.",
	"::java::server::util::memory::GazeCooldownTicks.value": "Ticks before the armadillo or camel can randomly look around again.",
	"::java::server::util::memory::GolemDetectedRecently.value": "Whether the villager has detected an iron golem recently.",
	"::java::server::util::memory::HasHuntingCooldown.value": "Whether the axolotl is in a hunting cooldown.",
	"::java::server::util::memory::Home.value": "Position of the villager's home.",
	"::java::server::util::memory::HuntedRecently.value": "Whether the piglin just hunted recently.\nSet after hunting or spawning in a bastion remnant.",
	"::java::server::util::memory::IsEmerging.value": "Whether the warden is currently emerging from the ground.",
	"::java::server::util::memory::IsInWater.value": "Whether the frog is currently in water.",
	"::java::server::util::memory::IsPanicking.value": "Whether the mob is currently panicking.",
	"::java::server::util::memory::IsPregnant.value": "Whether the frog is pregnant.",
	"::java::server::util::memory::IsSniffing.value": "Whether the warden or sniffer is currently sniffing.",
	"::java::server::util::memory::IsTempted.value": "Whether the mob is currently tempted by a player.",
	"::java::server::util::memory::ItemPickupCooldownTicks.value": "Ticks before the allay goes to pick up an item again.",
	"::java::server::util::memory::JobSite.value": "Position of the villager's job site.",
	"::java::server::util::memory::LastSlept.value": "The gametime tick that the villager last slept in a bed.",
	"::java::server::util::memory::LastWoken.value": "The gametime tick that the villager last woke up from a bed.",
	"::java::server::util::memory::LastWorkedAtPoi.value": "The gametime tick that the villager last worked at their job site.",
	"::java::server::util::memory::LikedNoteblock.value": "The position and dimension of the note block that the allay likes.",
	"::java::server::util::memory::LikedNoteblockCooldownTicks.value": "Ticks before the allay stops putting items at the liked note block.",
	"::java::server::util::memory::LikedPlayer.value": "The UUID of the player entity that the allay likes.",
	"::java::server::util::memory::LongJumpCoolingDown.value": "Ticks before the goat can long jump again.",
	"::java::server::util::memory::MeetingPoint.value": "Position of the villager's meeting point.",
	"::java::server::util::memory::PlayDeadTicks.value": "Ticks until the axolotl stops playing dead.",
	"::java::server::util::memory::PotentialJobSite.value": "Position of a potential job site of the villager.",
	"::java::server::util::memory::RamCooldownTicks.value": "Ticks before the goat can ram again.",
	"::java::server::util::memory::RecentProjectile.value": "Whether the warden has recently noticed a projectile vibration.",
	"::java::server::util::memory::RoarSoundCooldown.value": "If present, the warden doesn't roar.",
	"::java::server::util::memory::RoarSoundDelay.value": "If present, the warden doesn't roar.",
	"::java::server::util::memory::SniffCooldown.value": "If present, the warden or sniffer will not sniff.",
	"::java::server::util::memory::SnifferExploredPositions.value": "Last 20 block positions that the sniffer has dug up. The sniffer will not dig in these positions.",
	"::java::server::util::memory::SonicBoomCooldown.value": "If present, the warden will not use the sonic boom attack.",
	"::java::server::util::memory::SonicBoomSoundCooldown.value": "If present, the warden's sonic boom animation will not spawn particles and play sounds.",
	"::java::server::util::memory::SonicBoomSoundDelay.value": "If present, will delay the warden's sonic boom animation.",
	"::java::server::util::memory::TemptationCooldownTicks.value": "Ticks before the mob can be tempted again.",
	"::java::server::util::memory::TouchCooldown.value": "If present, the warden will not react to being pushed by another mob. Set to 20 when touched.",
	"::java::server::util::memory::UniversalAnger.value": "Whether the piglin is being universally angered. Only used when the `universalAnger` gamerule is enabled.",
	"::java::server::util::memory::VibrationCooldown.value": "If present, the warden will not react to vibrations. Set to 40 when receiving a vibration.",
	"::java::server::util::particle::DustColor": "Randomized color interpreted from three floats.\n\nCheat Sheet:\n- Floats between 0 and 1 are interpreted as a percentage of the original color. Weirdness begins when floats are outside of this range.\n- 0-20% of darkness is added per channel.\n- The final color is 0-40% darker. \n- `1e100000f` produces a solid channel with no randomization.\n\nSimplified internal behavior ([graph demo](https://www.desmos.com/calculator/drwzjaxgks)):\n```js\nfunction integerToByte(integer) {\nif (integer >= 0) {\n// Integer is positive\nif (integer <= 255) {\n// Integer already fits in a color channel\nreturn integer\n}\n// Integer doesn't fit in color channel; modulo it\nreturn integer % 256\n}\n// Integer is negative\nreturn Math.abs((Math.floor(integer / 256) * 256)) + integer\n}\n\nvar baseShade = randomBetween(0.6, 1),\nr = integerToByte(Math.floor(color[0] * randomBetween(0.8, 1) * baseShade * 255)),\ng = integerToByte(Math.floor(color[1] * randomBetween(0.8, 1) * baseShade * 255)),\nb = integerToByte(Math.floor(color[2] * randomBetween(0.8, 1) * baseShade * 255))\n```",
	"::java::server::util::particle::EntityEffect.color": "Translucent color interpreted from four floats.\n\nCheat Sheet:\n- Floats between 0 and 1 are interpreted as a percentage of the original color.\n- Negative values & values above 1 simply loop the 0-255 range, since there isn't randomization there's no weirdness.\n\nSimplified internal behavior ([graph demo](https://www.desmos.com/calculator/drwzjaxgks)):\n```js\nfunction integerToByte(integer) {\nif (integer >= 0) {\n// Integer is positive\nif (integer <= 255) {\n// Integer already fits in a color channel\nreturn integer\n}\n// Integer doesn't fit in color channel; modulo it\nreturn integer % 256\n}\n// Integer is negative\nreturn Math.abs((Math.floor(integer / 256) * 256)) + integer\n}\n```",
	"::java::server::util::particle::SculkCharge.roll": "Angle the particle texture is rotated to, measured in radians (π ~ 3.14 for 180° clockwise, negative for counter clockwise).",
	"::java::server::util::particle::ShriekParticle.delay": "Ticks until the particle renders.",
	"::java::server::util::particle::VibrationParticle.arrival_in_ticks": "Ticks in which to interpolate the particle's initial position to the destination.",
	"::java::server::util::text::ChangePage.value": "The page number to go to.",
	"::java::server::util::text::CopyToClipboard.value": "The text value to copy to the clipboard.",
	"::java::server::util::text::TextStyle.shadow_color": "Overrides the shadow properties of the text.\nIf specified as 0, the shadow will never be displayed.",
	"::java::server::world::block::beacon::Beacon.Levels": "Number of levels from the pyramid.",
	"::java::server::world::block::beacon::Beacon.Primary": "Potion effect.",
	"::java::server::world::block::beacon::Beacon.Secondary": "Potion effect.",
	"::java::server::world::block::BlockEntity.keepPacked": "Unknown\n0 for regular block entities",
	"::java::server::world::block::brewing_stand::BrewingStand.BrewTime": "Number of ticks until the brewing is complete.",
	"::java::server::world::block::brewing_stand::BrewingStand.Fuel": "Amount of fuel the brewing stand has left.",
	"::java::server::world::block::brewing_stand::BrewingStand.Items": "* 0: left brewing slot\n* 1: middle brewing slot\n* 2: right brewing slot\n* 3: ingredient slot\n* 4: fuel slot",
	"::java::server::world::block::brushable_block::BrushableBlock.hit_direction": "Direction of the block that was interacted with.\nWrite-only, is not saved by the game.",
	"::java::server::world::block::brushable_block::BrushableBlock.item": "Item that was rolled from the loot table, which is currently peeking out.",
	"::java::server::world::block::brushable_block::BrushableBlock.LootTable": "Loot table that will decide the brushed loot.",
	"::java::server::world::block::brushable_block::BrushableBlock.LootTableSeed": "Seed of the loot table.",
	"::java::server::world::block::campfire::Campfire.CookingTimes": "Ticks each item has been cooking.\nIndex is according to item slot.",
	"::java::server::world::block::campfire::Campfire.CookingTotalTimes": "Ticks each item still has to cook.\nIndex is according to item slot.",
	"::java::server::world::block::chiseled_bookshelf::ChiseledBookshelf.Items": "Slots from 0 to 5.",
	"::java::server::world::block::command_block::BaseCommandBlock.Command": "The command to run.",
	"::java::server::world::block::command_block::BaseCommandBlock.LastExecution": "Tick of the latest command execution.",
	"::java::server::world::block::command_block::BaseCommandBlock.LastOutput": "Output of the last command.",
	"::java::server::world::block::command_block::BaseCommandBlock.SuccessCount": "Success count of the last command.",
	"::java::server::world::block::command_block::BaseCommandBlock.TrackOutput": "Whether to record command output.",
	"::java::server::world::block::command_block::BaseCommandBlock.UpdateLastExecution": "Whether to record the tick of the latest command execution.",
	"::java::server::world::block::command_block::CommandBlock.auto": "Whether it is automatically powered.",
	"::java::server::world::block::command_block::CommandBlock.conditionMet": "Whether the previous command block was successful when the command block was executed.\nThis is always true for non-conditional command blocks.",
	"::java::server::world::block::command_block::CommandBlock.powered": "Whether it is powered by redstone.",
	"::java::server::world::block::comparator::Comparator.OutputSignal": "Strength of the redstone output.",
	"::java::server::world::block::conduit::Conduit.Target": "The hostile mob that the conduit is currently attacking.",
	"::java::server::world::block::conduit::Conduit.target_uuid": "The hostile mob that the conduit is currently attacking.",
	"::java::server::world::block::conduit::TargetUuid.L": "Lower bits of the target's UUID",
	"::java::server::world::block::conduit::TargetUuid.M": "Upper bits of the target's UUID",
	"::java::server::world::block::container::Container27.Items": "Slots from 0 to 26.",
	"::java::server::world::block::container::Container9.Items": "Slots from 0 to 8.",
	"::java::server::world::block::container::ContainerBase.LootTable": "Loot table that will populate this container.",
	"::java::server::world::block::container::ContainerBase.LootTableSeed": "Seed of the loot table.",
	"::java::server::world::block::container::Hopper.Items": "Slots from 0 to 4.",
	"::java::server::world::block::container::Hopper.TransferCooldown": "Ticks until an item can be transferred.",
	"::java::server::world::block::creaking_heart::CreakingHeart.creaking": "The creaking mob that is linked to this heart.",
	"::java::server::world::block::decorated_pot::DecoratedPot.LootTable": "Loot table that will populate this container.",
	"::java::server::world::block::decorated_pot::DecoratedPot.LootTableSeed": "Seed of the loot table.",
	"::java::server::world::block::decorated_pot::DecoratedPot.sherds": "Item ID of what was used for each side of the pot.",
	"::java::server::world::block::end_gateway::EndGateway.Age": "In game ticks.",
	"::java::server::world::block::end_gateway::EndGateway.ExactTeleport": "Whether to teleport to the exact location.",
	"::java::server::world::block::end_gateway::EndGateway.exit_portal": "Coordinates of where to teleport entities to.",
	"::java::server::world::block::end_gateway::EndGateway.ExitPortal": "Coordinates of where to teleport entities to.",
	"::java::server::world::block::furnace::Furnace.BurnTime": "Ticks until the current fuel runs out.",
	"::java::server::world::block::furnace::Furnace.cooking_time_spent": "Ticks the item has been smelting for.",
	"::java::server::world::block::furnace::Furnace.cooking_total_time": "Total ticks the item will take to be smelted.",
	"::java::server::world::block::furnace::Furnace.CookTime": "Ticks the item has been smelting for.",
	"::java::server::world::block::furnace::Furnace.CookTimeTotal": "Total ticks the item will take to be smelted.",
	"::java::server::world::block::furnace::Furnace.Items": "The items in this furnace, with slots:\n* 0: Item being smelted\n* 1: Fuel\n* 2: Output",
	"::java::server::world::block::furnace::Furnace.lit_time_remaining": "Ticks until the current fuel runs out.",
	"::java::server::world::block::furnace::Furnace.lit_total_time": "Total ticks the current fuel will burn.",
	"::java::server::world::block::furnace::Furnace.RecipesUsed": "Recipes that have been used since the last time a result item was removed from the GUI. Used to calculate the experience to give to the player.",
	"::java::server::world::block::furnace::Furnace.RecipesUsed.[string]": "How many times this recipe has been used.",
	"::java::server::world::block::furnace::RecipesUsed.[string]": "How many times this recipe has been used.",
	"::java::server::world::block::head::PlayerHead.ExtraType": "Name of the owner, if exists will be converted to SkullOwner.",
	"::java::server::world::block::head::PlayerHead.Owner": "Owner of the skull.",
	"::java::server::world::block::head::SkullOwner.Id": "Optional.",
	"::java::server::world::block::head::SkullOwner.Name": "If missing appears as a steve head.",
	"::java::server::world::block::head::Texture.Value": "Base64 encoded JSON value of the texture index.",
	"::java::server::world::block::jigsaw::Jigsaw.attachment_type": "ID of the type of jigsaw this connects to.",
	"::java::server::world::block::jigsaw::Jigsaw.final_state": "Final block state of the jigsaw.",
	"::java::server::world::block::jigsaw::Jigsaw.joint": "How the resultant structure can be transformed.",
	"::java::server::world::block::jigsaw::Jigsaw.name": "ID this will \"spawn\" in.",
	"::java::server::world::block::jigsaw::Jigsaw.pool": "Structure pool this will \"spawn\" in.",
	"::java::server::world::block::jigsaw::Jigsaw.target": "ID of the type of jigsaw this will be \"spawned\" from.",
	"::java::server::world::block::jigsaw::Jigsaw.target_pool": "Structure pool this will connect to.",
	"::java::server::world::block::jigsaw::JointType.Aligned": "The structure cannot be transformed",
	"::java::server::world::block::jigsaw::JointType.Rollable": "The structure can be rotated",
	"::java::server::world::block::lectern::Lectern.Page": "Current page the book is on.",
	"::java::server::world::block::Lockable.lock": "Item predicate testing the item that a player has to be holding to open this container.",
	"::java::server::world::block::Lockable.Lock": "Name of the item that a player has to be holding to open this container.\nSource is flattened to plain text and has formatting removed before the check.",
	"::java::server::world::block::moving_piston::MovingPiston.blockState": "Moving block represented by the moving piston.",
	"::java::server::world::block::moving_piston::MovingPiston.facing": "The direction it is moving.",
	"::java::server::world::block::moving_piston::MovingPiston.progress": "How far it has moved.",
	"::java::server::world::block::moving_piston::MovingPiston.source": "Whether the moving piston is the piston head.",
	"::java::server::world::block::Nameable.CustomName": "The custom name of this block.",
	"::java::server::world::block::sculk_sensor::SculkSensor.listener": "Vibration listener",
	"::java::server::world::block::sign::OldSign.Color": "Color the text has been dyed.",
	"::java::server::world::block::sign::OldSign.Text1": "First line of text.",
	"::java::server::world::block::sign::OldSign.Text2": "Second line of text.",
	"::java::server::world::block::sign::OldSign.Text3": "Third line of text.",
	"::java::server::world::block::sign::OldSign.Text4": "Fourth line of text.",
	"::java::server::world::block::sign::Sign.is_waxed": "Whether the sign can no longer be edited. If a sign is editable",
	"::java::server::world::block::spawner::CustomSpawnRules.block_light_limit": "Range of block light level required for the entity to spawn.",
	"::java::server::world::block::spawner::CustomSpawnRules.sky_light_limit": "Range of sky light level required for the entity to spawn.",
	"::java::server::world::block::spawner::SpawnEquipment.loot_table": "Generates the equipment.",
	"::java::server::world::block::spawner::SpawnEquipment.slot_drop_chances": "Chance the mob will drop the equipment on death.",
	"::java::server::world::block::spawner::Spawner.Delay": "Ticks until the next spawn.",
	"::java::server::world::block::spawner::Spawner.MaxNearbyEntities": "Maximum number of entities nearby.",
	"::java::server::world::block::spawner::Spawner.MaxSpawnDelay": "Maximum random delay for the next spawn.",
	"::java::server::world::block::spawner::Spawner.MinSpawnDelay": "Minimum random delay for the next spawn.",
	"::java::server::world::block::spawner::Spawner.RequiredPlayerRange": "Radius in blocks that a player has to be within to spawn entities.",
	"::java::server::world::block::spawner::Spawner.SpawnCount": "Number of entities that will be placed.",
	"::java::server::world::block::spawner::Spawner.SpawnData": "Data for the next mob to spawn.\nOverwritten by `SpawnPotentials`.",
	"::java::server::world::block::spawner::Spawner.SpawnPotentials": "Entities that can be placed.",
	"::java::server::world::block::spawner::Spawner.SpawnRange": "Range that the spawned entities will be placed.",
	"::java::server::world::block::spawner::SpawnerEntry.equipment": "Rolled items from the specified loot table will be equipped to the mob that spawns.",
	"::java::server::world::block::spawner::SpawnPotential.weight": "Weight for this entry to be chosen.",
	"::java::server::world::block::spawner::SpawnPotential.Weight": "Weight for this entry to be chosen.",
	"::java::server::world::block::spawner::TrialSpawner.cooldown_ends_at": "Gametime in ticks when the cooldown ends",
	"::java::server::world::block::spawner::TrialSpawner.current_mobs": "All mobs that have been spawned by this trial spawner and are currently alive",
	"::java::server::world::block::spawner::TrialSpawner.ejecting_loot_table": "The loot table selected to be used to determine the reward",
	"::java::server::world::block::spawner::TrialSpawner.next_mob_spawns_at": "Gametime in ticks when the next spawning attempt happens",
	"::java::server::world::block::spawner::TrialSpawner.normal_config": "Spawning behavior when the player does not have the Bad Omen effect.",
	"::java::server::world::block::spawner::TrialSpawner.ominous_config": "Spawning behavior when the player has the Bad Omen effect.",
	"::java::server::world::block::spawner::TrialSpawner.registered_players": "Players that are have been nearby during the current battle",
	"::java::server::world::block::spawner::TrialSpawner.required_player_range": "Maximum distance for players to activate the trial spawner, or join a battle",
	"::java::server::world::block::spawner::TrialSpawner.spawn_data": "The next entity to spawn, also controlls the entity displayed in the trial spawner",
	"::java::server::world::block::spawner::TrialSpawner.target_cooldown_length": "Time in ticks for the cooldown period. Included the time spend dispensing the reward.",
	"::java::server::world::block::structure_block::StructureBlock.author": "Author of the structure.",
	"::java::server::world::block::structure_block::StructureBlock.integrity": "Chance for each block to stay.",
	"::java::server::world::block::structure_block::StructureBlock.metadata": "Custom data for the structure. Stores the data id for \"DATA\" mode.",
	"::java::server::world::block::structure_block::StructureBlock.posX": "Relative offset.",
	"::java::server::world::block::structure_block::StructureBlock.posY": "Relative offset.",
	"::java::server::world::block::structure_block::StructureBlock.posZ": "Relative offset.",
	"::java::server::world::block::structure_block::StructureBlock.powered": "Whether it has been powered by redstone.",
	"::java::server::world::block::structure_block::StructureBlock.seed": "Seed for the integrity random.",
	"::java::server::world::block::structure_block::StructureBlock.showair": "Whether to show invisible blocks inside the bounding box.",
	"::java::server::world::block::structure_block::StructureBlock.showboundingbox": "Whether to show the bounding box.",
	"::java::server::world::block::structure_block::StructureBlock.strict": "If set to `true`, the blocks in the placed structure will trigger block (entity) updates and shape updates. Defaults to `false`.",
	"::java::server::world::block::vault::Config.key_item": "Item required to open the vault.",
	"::java::server::world::block::vault::Config.loot_table": "Defaults to \"minecraft:chests/trial_chambers/reward\".",
	"::java::server::world::block::vault::ServerData.items_to_eject": "Items that are being ejected from the vault when it is opened. As each item is ejected, it is removed from this list, before ejection, it is previewed as the `display_item`.",
	"::java::server::world::block::vault::ServerData.rewarded_players": "When a player is in this list they can no longer open the vault, but other players can.",
	"::java::server::world::block::vault::ServerData.state_updating_resumes_at": "Ticks until the loot table is ran again to update the display item.",
	"::java::server::world::block::vault::ServerData.total_ejections_needed": "Number of items that the loot table started off the opening with, does not change while items are ejected.",
	"::java::server::world::block::vault::SharedData.display_item": "Item that is displayed to players when they are in range of the vault.",
	"::java::server::world::block::vault::Vault.shared_data": "When a player is in range of the vault, the same display item will be shown to all players.\nThis is also used for the items that are being ejected from the vault.",
	"::java::server::world::block::vault::Vault.shared_data.display_item": "Item that is displayed to players when they are in range of the vault.",
	"::java::server::world::entity::AnyEntity.id": "The ID of this entity. Not present on player entities.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.Age": "Number of ticks it has existed.\nControls when it will despawn; when greater than `Duration + WaitTime`.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.Color": "Color of the particles.\ncalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.Duration": "Maximum number of ticks until it will disappear after `WaitTime` is done",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.DurationOnUse": "Amount the duration changes when it is active.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.Effects": "Potion effects that get applied on use.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.OwnerUUIDLeast": "Lower bits of the owner's UUID.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.OwnerUUIDMost": "Upper bits of the owner's UUID.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.Particle": "Particle the area effect cloud displays.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.Potion": "Default potion effect.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.potion_duration_scale": "The duration of the potion effect applied is scaled by this factor. Defaults to `1`.\nWill be `0.25` when throwing lingering potions.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.Radius": "Radius of the particles & effect applications.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.RadiusOnUse": "Change in the radius when it is used.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.RadiusPerTick": "Change in the radius per tick.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.ReapplicationDelay": "Number of ticks until the effects are reapplied.",
	"::java::server::world::entity::area_effect_cloud::AreaEffectCloud.WaitTime": "Number of ticks until it appears.",
	"::java::server::world::entity::boat::Boat.Type": "Wood type of this boat",
	"::java::server::world::entity::boat::ChestBoat.Items": "Slots from 0 to 26.",
	"::java::server::world::entity::boat::ChestBoat.LootTable": "Loot table that will populate this chest boat.",
	"::java::server::world::entity::boat::ChestBoat.LootTableSeed": "Seed of the loot table.",
	"::java::server::world::entity::display::AxisAngle.angle": "Angle to rotate around axis in radians.",
	"::java::server::world::entity::display::AxisAngle.axis": "Local position of the axis in [x, y, z].",
	"::java::server::world::entity::display::Billboard.Center": "Pivot around both axes.",
	"::java::server::world::entity::display::Billboard.Fixed": "No rotation.",
	"::java::server::world::entity::display::Billboard.Horizontal": "Pivot around horizontal axis.",
	"::java::server::world::entity::display::Billboard.Vertical": "Pivot around vertical axis.",
	"::java::server::world::entity::display::BlockDisplay.block_state": "Block state to display.\nDoes display most block entities (eg. Chests, Beds, Furnaces, etc).\nDoes not display specially rendered block entities (eg. The bell in a bell block, an end gateway, the book on an enchantment table, a banner, a sign, etc).",
	"::java::server::world::entity::display::Brightness.block": "Value of block light.",
	"::java::server::world::entity::display::Brightness.sky": "Value of skylight.",
	"::java::server::world::entity::display::DecomposedTransformation.left_rotation": "Using this rotation is enough for most transformations.",
	"::java::server::world::entity::display::DecomposedTransformation.right_rotation": "For more complex transformations.",
	"::java::server::world::entity::display::DecomposedTransformation.scale": "Scale in [x, y, z].",
	"::java::server::world::entity::display::DecomposedTransformation.translation": "Translation in [x, y, z].",
	"::java::server::world::entity::display::DisplayBase.billboard": "Controls if model should pivot to face player when rendered. Defaults to `fixed`.",
	"::java::server::world::entity::display::DisplayBase.billboard.Center": "Pivot around both axes.",
	"::java::server::world::entity::display::DisplayBase.billboard.Fixed": "No rotation.",
	"::java::server::world::entity::display::DisplayBase.billboard.Horizontal": "Pivot around horizontal axis.",
	"::java::server::world::entity::display::DisplayBase.billboard.Vertical": "Pivot around vertical axis.",
	"::java::server::world::entity::display::DisplayBase.brightness": "When defined, overrides light values used for rendering. Omitted by default (which means rendering uses values from entity position).",
	"::java::server::world::entity::display::DisplayBase.brightness.block": "Value of block light.",
	"::java::server::world::entity::display::DisplayBase.brightness.sky": "Value of skylight.",
	"::java::server::world::entity::display::DisplayBase.glow_color_override": "Override glow border color. If field is set to 0, uses team color. Defaults to 0.\nCalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::entity::display::DisplayBase.height": "Describe height of culling bounding box.\nBounding box spans vertically y to y+height and horizontally width/2 in all directions from entity position.\nIf field is set to 0, culling is disabled. Defaults to 0.",
	"::java::server::world::entity::display::DisplayBase.interpolation_duration": "Ticks the interpolation should take to complete.",
	"::java::server::world::entity::display::DisplayBase.shadow_radius": "Size of shadow. Defaults to 0 (no shadow). Interpolated.",
	"::java::server::world::entity::display::DisplayBase.shadow_strength": "Strength of the shadow. Controls the opacity of the shadow as a function of distance to block below. Defaults to 1. Interpolated.",
	"::java::server::world::entity::display::DisplayBase.start_interpolation": "Ticks after the next client tick to wait until starting the interpolation.\nInfo:\nAll interpolated properties are part of a single interpolation set.\nAny update to an interpolated property will cause all values of the interpolation set to be saved as \"current\".\n- Data command executions that do not change value of property (even if it's present in NBT) do not count as updates.\n- Updates are synchronized to clients at most once per tick, so multiple updates within command will still count as single update.\nPrevious current values are saved as \"previous\".\nIf interpolation is enabled, entity will transition between \"previous\" and \"current\" values over time.\n`interpolation_duration` must be set every time an interpolatable property is updated to cause interpolation.\nNegative values are allowed, will cause an instant jump to the subtracted duration value, then interpolation will continue as normal.",
	"::java::server::world::entity::display::DisplayBase.teleport_duration": "How long in game ticks the entity takes to interpolate from it's starting location to it's destination when teleported. Defaults to 0 (no interpolation).",
	"::java::server::world::entity::display::DisplayBase.transformation": "Transformation applied to model (after normal entity orientation). Defaults to identity. Interpolated.\nFor an easy GUI, check out [Misode's tool](https://misode.github.io/transformation/).\n\nThe value is stored in decomposed object form for interpolation & ease-of-use,\nSupports storing a non-canonical matrix form describing a row-major matrix, is automatically decomposed by the game with a performance cost.\n\nThe matrix takes the following form:\n```js\n[ \ns0, s1, s2, tx,\ns3, s4, s5, ty,\ns6, s7, s8, tz,\ni0, i1, i2, w\n]\n```\nWhere:\n- `i0`-`i2`: Ignored values, these can be anything, but the game will ignore the values.\n- `w`: This value is used as a divisor of all other values (except `i0`-`i2`). i.e. all the other values get divided by `w` before doing any further calculations.\n- `tx`, `ty`, `tz`: Translation value, this is used directly as the `transformation.translation` after dividing by `w`. i.e. `transformation:{translation:[tx/w, ty/w, tz/w]}`.\n- `s0`-`s8`: After dividing each element by `w`, this top left 3x3 of the matrix is passed through the [Singular Value Decomposition](https://en.wikipedia.org/wiki/Singular_value_decomposition) algorithm to extract the `transformation.left_rotation`, `transformation.scale`, and `transformation.right_rotation`. The exact values of this decomposition are difficult to predict.",
	"::java::server::world::entity::display::DisplayBase.transformation.left_rotation": "Using this rotation is enough for most transformations.",
	"::java::server::world::entity::display::DisplayBase.transformation.right_rotation": "For more complex transformations.",
	"::java::server::world::entity::display::DisplayBase.transformation.scale": "Scale in [x, y, z].",
	"::java::server::world::entity::display::DisplayBase.transformation.translation": "Translation in [x, y, z].",
	"::java::server::world::entity::display::DisplayBase.view_range": "Maximum view range of this entity. Actual distance depends on client-side render distance and entity distance scaling. Default value 1.0 (roughly the same as fireball).",
	"::java::server::world::entity::display::DisplayBase.width": "Describe width of culling bounding box.\nBounding box spans vertically y to y+height and horizontally width/2 in all directions from entity position.\nIf field is set to 0, culling is disabled. Defaults to 0.",
	"::java::server::world::entity::display::ItemDisplay.item": "Item stack to display.",
	"::java::server::world::entity::display::ItemDisplay.item_display": "Describes item model transform applied to item (as defined in `display` section in model JSON). Defaults to `fixed`.",
	"::java::server::world::entity::display::text::TextDisplay.alignment": "How text should be aligned. Defaults to `center`.\nWill log an error when not specified, see [MC-261036](https://bugs.mojang.com/browse/MC-261036).",
	"::java::server::world::entity::display::text::TextDisplay.background": "Color of background. Includes alpha channel. Defaults to 0x40000000. Interpolated.\nCalculated as `ALPHA << 24 | RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::entity::display::text::TextDisplay.default_background": "If true, overrides `background` & rendering uses default text background color (same as in chat). Defaults to false.",
	"::java::server::world::entity::display::text::TextDisplay.line_width": "Line width in pixels used to split lines (note: new line can be also added with \\n characters). Defaults to 200.",
	"::java::server::world::entity::display::text::TextDisplay.see_through": "Should text be visible through blocks. Defaults to false.",
	"::java::server::world::entity::display::text::TextDisplay.shadow": "Should text be displayed with shadow. Defaults to false.",
	"::java::server::world::entity::display::text::TextDisplay.text": "Text to display. Components are resolved with the executor set to the display entity and the position set to `0 0 0`.",
	"::java::server::world::entity::display::text::TextDisplay.text_opacity": "Opacity (alpha component) of rendered text. Defaults to 255. Interpolated.",
	"::java::server::world::entity::end_crystal::EvokerFangs.beam_target": "Coordinates that the beam is pointing to",
	"::java::server::world::entity::end_crystal::EvokerFangs.BeamTarget": "Coordinates that the beam is pointing to",
	"::java::server::world::entity::end_crystal::EvokerFangs.ShowBottom": "Whether to show the base of the end crystal.",
	"::java::server::world::entity::EntityBase": "Base NBT for all entities,",
	"::java::server::world::entity::EntityBase.Air": "Ticks of air left.",
	"::java::server::world::entity::EntityBase.CustomNameVisible": "Whether the custom name should always be visible.",
	"::java::server::world::entity::EntityBase.FallDistance": "How far the entity has fallen.",
	"::java::server::world::entity::EntityBase.Fire": "Ticks of fire left, or if negative, ticks until the entity starts to burn.",
	"::java::server::world::entity::EntityBase.Glowing": "Whether the entity should glow.",
	"::java::server::world::entity::EntityBase.HasVisualFire": "Whether the entity has visual fire.",
	"::java::server::world::entity::EntityBase.Invulnerable": "Whether the entity should take damage.",
	"::java::server::world::entity::EntityBase.NoGravity": "Whether the entity should be effected by gravity.",
	"::java::server::world::entity::EntityBase.OnGround": "Whether the entity is on the ground.",
	"::java::server::world::entity::EntityBase.Passengers": "Passengers on the entity.",
	"::java::server::world::entity::EntityBase.PortalCooldown": "How long until the entity can go through a nether portal.",
	"::java::server::world::entity::EntityBase.Rotation": "Rotation in [y-rotation, x-rotation]",
	"::java::server::world::entity::EntityBase.Silent": "Whether the entity should make any sound.",
	"::java::server::world::entity::EntityBase.Tags": "Labelling tags on the entity.",
	"::java::server::world::entity::EntityBase.TicksFrozen": "Ticks that this entity has been freezing. Although this tag is defined for all entities,\nit is actually only used by mobs that are not in the `freeze_immune_entity_types` entity type tag.\nThis increases by one every tick the entity is in powdered snow, and decreases by two when it's out of it.",
	"::java::server::world::entity::EntityBase.UUIDLeast": "Lower bits of the entity's UUID.",
	"::java::server::world::entity::EntityBase.UUIDMost": "Upper bits of the entity's UUID.",
	"::java::server::world::entity::evoker_fangs::EvokerFangs.Warmup": "Ticks until the fangs pop out of the ground.",
	"::java::server::world::entity::evoker_fangs::Owner.OwnerUUIDLeast": "Lower bits of the owner's UUID.",
	"::java::server::world::entity::evoker_fangs::Owner.OwnerUUIDMost": "Upper bits of the owner's UUID.",
	"::java::server::world::entity::experience_orb::ExperienceOrb.Age": "Ticks that it has existed.",
	"::java::server::world::entity::experience_orb::ExperienceOrb.Count": "Remaining number of times that the orb can be picked up.\nWhen the orb is picked up, the value decreases by 1.\nWhen multiple orbs are merged, their values are added up to result orb.\nWhen the value reaches 0, the orb is depleted.",
	"::java::server::world::entity::experience_orb::ExperienceOrb.Value": "Amount of experience it will give.",
	"::java::server::world::entity::eye_of_ender::EyeOfEnder.Item": "Item to render as",
	"::java::server::world::entity::falling_block::FallingBlock.BlockState": "Block state for the placed block.",
	"::java::server::world::entity::falling_block::FallingBlock.CancelDrop": "Whether the block should be destroyed instead of placed after landing on a solid block.\nWhen `true`, the block is not dropped as an item, even if the DropItem tag is set to `true`.\nHowever, if the entity is deleted due to its Time value being too high, this tag is ignored and an item is dropped depending on the `DropItem` tag.\nDefaults to `1` for falling suspicious sand and suspicious gravel, and `0` for the other vanilla falling blocks and any summoned falling block.",
	"::java::server::world::entity::falling_block::FallingBlock.DropItem": "Whether it should drop as a block when destroyed.",
	"::java::server::world::entity::falling_block::FallingBlock.FallHurtAmount": "Damage multiplier.",
	"::java::server::world::entity::falling_block::FallingBlock.FallHurtMax": "Maximum damage it should deal.",
	"::java::server::world::entity::falling_block::FallingBlock.HurtEntities": "Whether this it should hurt entities.",
	"::java::server::world::entity::falling_block::FallingBlock.TileEntityData": "NBT data for the placed block.",
	"::java::server::world::entity::falling_block::FallingBlock.Time": "Ticks it has existed.",
	"::java::server::world::entity::firework_rocket::FireWorkRocket.Life": "Ticks it has existed.",
	"::java::server::world::entity::firework_rocket::FireWorkRocket.LifeTime": "Ticks it will exist.",
	"::java::server::world::entity::firework_rocket::FireWorkRocket.ShotAtAngle": "Whether it should move at an angle.",
	"::java::server::world::entity::interaction::Action.timestamp": "Game tick of when the event occured.",
	"::java::server::world::entity::interaction::Interaction.attack": "Record of last attack (left click) event, can be updated every tick (no invulnerability frames).",
	"::java::server::world::entity::interaction::Interaction.height": "Cube hitbox height stretching up from the entity position. Negative values stretch the hitbox down.",
	"::java::server::world::entity::interaction::Interaction.interaction": "Record of last interaction (use; right click) event, can be updated every tick, if the player is holding the key it updates every 3 ticks.",
	"::java::server::world::entity::interaction::Interaction.response": "Whether an action should trigger a response. Defaults to false.\nResponse:\nAttack - When true, the default attack sound is played.\nInteraction - When true, the player's arm swings.",
	"::java::server::world::entity::interaction::Interaction.width": "Cube hitbox width centered on the entity. Negative values are effectively `| x |`.",
	"::java::server::world::entity::item_frame::ItemFrame.Facing": "Direction it is facing.",
	"::java::server::world::entity::item_frame::ItemFrame.Fixed": "Whether the item frame should not be able to be broken and should disallow the item to be moved.",
	"::java::server::world::entity::item_frame::ItemFrame.Invisible": "Whether the item frame should be invisible.\nThe item inside the frame is not effected.",
	"::java::server::world::entity::item_frame::ItemFrame.ItemDropChance": "Chance the item has to drop.",
	"::java::server::world::entity::item_frame::ItemFrame.ItemRotation": "Rotation of the item.",
	"::java::server::world::entity::item::Item.Age": "Ticks it has existed.",
	"::java::server::world::entity::item::Item.Owner": "Only this entity can pick up the item.",
	"::java::server::world::entity::item::Item.PickupDelay": "Ticks until an entity can pick up this item.",
	"::java::server::world::entity::item::Item.Thrower": "Player who threw the item. Can be set and/or changed to any entity.",
	"::java::server::world::entity::item::Uuid.L": "Lower bits of the target player's UUID",
	"::java::server::world::entity::item::Uuid.M": "Upper bits of the target player's UUID",
	"::java::server::world::entity::marker::Marker.data": "Any stored data",
	"::java::server::world::entity::minecart::ChestMinecart.Items": "Slots from 0 to 26.",
	"::java::server::world::entity::minecart::ContainerMinecart.LootTable": "Loot table that will populate this minecart.",
	"::java::server::world::entity::minecart::ContainerMinecart.LootTableSeed": "Seed of the loot table.",
	"::java::server::world::entity::minecart::FurnaceMinecart.Fuel": "Ticks until the fuel runs out.",
	"::java::server::world::entity::minecart::FurnaceMinecart.PushX": "Acceleration in x axis.",
	"::java::server::world::entity::minecart::FurnaceMinecart.PushZ": "Acceleration in z axis.",
	"::java::server::world::entity::minecart::HopperMinecart.Enabled": "Whether it should pick up items.",
	"::java::server::world::entity::minecart::HopperMinecart.Items": "Slots from 0 to 4.",
	"::java::server::world::entity::minecart::HopperMinecart.TransferCooldown": "Ticks until an item can be transferred.",
	"::java::server::world::entity::minecart::Minecart.CustomDisplayTile": "Whether to display a custom block.",
	"::java::server::world::entity::minecart::Minecart.DisplayOffset": "Vertical offset of the custom block display.",
	"::java::server::world::entity::minecart::Minecart.DisplayState": "Custom block to display.\nOnly has effects when `CustomDisplayTile` is true.",
	"::java::server::world::entity::minecart::SpawnerMinecart.Delay": "Ticks until the next spawn.",
	"::java::server::world::entity::minecart::SpawnerMinecart.MaxNearbyEntities": "Maximum number of entities nearby.",
	"::java::server::world::entity::minecart::SpawnerMinecart.MaxSpawnDelay": "Maximum random delay for the next spawn.",
	"::java::server::world::entity::minecart::SpawnerMinecart.MinSpawnDelay": "Minimum random delay for the next spawn.",
	"::java::server::world::entity::minecart::SpawnerMinecart.RequiredPlayerRange": "Radius in blocks that a player has to be within to spawn entities.",
	"::java::server::world::entity::minecart::SpawnerMinecart.SpawnCount": "Number of entities that will be placed.",
	"::java::server::world::entity::minecart::SpawnerMinecart.SpawnData": "Data for the next mob to place.\nWill be overwritten by `SpawnPotentials`.",
	"::java::server::world::entity::minecart::SpawnerMinecart.SpawnPotentials": "List of potential entities to place next.",
	"::java::server::world::entity::minecart::SpawnerMinecart.SpawnRange": "Range that the spawned entities will be placed in.",
	"::java::server::world::entity::minecart::TntMinecart.explosion_speed_factor": "Controls the amount of added damage depending on the speed of the minecart.",
	"::java::server::world::entity::minecart::TntMinecart.fuse": "Ticks until it explodes.",
	"::java::server::world::entity::minecart::TntMinecart.TNTFuse": "Ticks until it explodes.",
	"::java::server::world::entity::mob::AgeableMob.Age": "The age of the mob in ticks. When negative, the mob is a baby. When 0 or above, the mob is an adult.\nIf this mob is breedable, when 0 or above, represents the number of ticks before it can breed again.",
	"::java::server::world::entity::mob::AgeableMob.ForcedAge": "A value of age assigned to this mob when it grows up.\nIncremented when a baby mob is fed.",
	"::java::server::world::entity::mob::allay::Allay.CanDuplicate": "Whether the allay can duplicate. This is set to false when the allay duplicates.",
	"::java::server::world::entity::mob::allay::Allay.DuplicationCooldown": "Ticks until `CanDuplicate` is set to true. This is set to 6000 game ticks (5 minutes) when the allay duplicates.",
	"::java::server::world::entity::mob::allay::Allay.Inventory": "Items it has picked up. Note that the item given by the player is in\nthe allay's `HandItems[0]` tag, not here.",
	"::java::server::world::entity::mob::allay::Allay.listener": "Vibration game event listener.",
	"::java::server::world::entity::mob::armor_stand::ArmorStand.DisabledSlots": "A bitfield of the slots that cannot be used.",
	"::java::server::world::entity::mob::armor_stand::ArmorStand.Invisible": "Whether it should be invisible.",
	"::java::server::world::entity::mob::armor_stand::ArmorStand.Marker": "Whether it has no hitbox.",
	"::java::server::world::entity::mob::armor_stand::ArmorStand.NoBasePlate": "Whether it should have a no base plate.",
	"::java::server::world::entity::mob::armor_stand::ArmorStand.Pose": "Body part rotations.",
	"::java::server::world::entity::mob::armor_stand::ArmorStand.ShowArms": "Whether it should show its arms.",
	"::java::server::world::entity::mob::armor_stand::ArmorStand.Small": "Whether it is small.",
	"::java::server::world::entity::mob::Attribute": "A single attribute.",
	"::java::server::world::entity::mob::Attribute.Modifiers": "Modifiers that act on it.",
	"::java::server::world::entity::mob::AttributeModifier": "A single attribute modifier",
	"::java::server::world::entity::mob::AttributeModifier.Amount": "Change in the attribute.",
	"::java::server::world::entity::mob::AttributeModifier.Name": "Has no real effect.",
	"::java::server::world::entity::mob::AttributeModifier.Slot": "Slot that the modifier is active in.",
	"::java::server::world::entity::mob::AttributeModifier.UUIDLeast": "Lower bits of the modifier's UUID.",
	"::java::server::world::entity::mob::AttributeModifier.UUIDMost": "Upper bits of the modifier's UUID.",
	"::java::server::world::entity::mob::bat::Bat.BatFlags": "Whether it is upside down.",
	"::java::server::world::entity::mob::BlockLeash.X": "X coordiante of leash knot.",
	"::java::server::world::entity::mob::BlockLeash.Y": "Y coordiante of leash knot.",
	"::java::server::world::entity::mob::BlockLeash.Z": "Z coordiante of leash knot.",
	"::java::server::world::entity::mob::bogged::Bogged.sheared": "Whether the mushrooms on this bogged have been sheared.",
	"::java::server::world::entity::mob::breedable::axolotl::Axolotl.FromBucket": "If this axolotl was released from a bucket.",
	"::java::server::world::entity::mob::breedable::axolotl::Axolotl.Variant": "The variant of the axolotl.",
	"::java::server::world::entity::mob::breedable::bee::Bee.Anger": "Ticks the bee will be angry for.",
	"::java::server::world::entity::mob::breedable::bee::Bee.CannotEnterHiveTicks": "Ticks until the bee can enter its hive.",
	"::java::server::world::entity::mob::breedable::bee::Bee.CropsGrownSincePollination": "Crops grown since the bee has gathered nectar.",
	"::java::server::world::entity::mob::breedable::bee::Bee.flower_pos": "Position of the flower the bee is circling",
	"::java::server::world::entity::mob::breedable::bee::Bee.FlowerPos": "Position of the flower the bee is circling",
	"::java::server::world::entity::mob::breedable::bee::Bee.HasNectar": "Whether the bee has nectar.",
	"::java::server::world::entity::mob::breedable::bee::Bee.HasStung": "Whether the bee has stung an entity.",
	"::java::server::world::entity::mob::breedable::bee::Bee.HurtBy": "Player that has attacked the bee.",
	"::java::server::world::entity::mob::breedable::bee::Bee.TicksSincePollination": "Ticks since the bee has pollinated a crop.",
	"::java::server::world::entity::mob::breedable::Breedable.InLove": "Ticks until it stops searching for a mate.",
	"::java::server::world::entity::mob::breedable::Breedable.LoveCause": "Player that caused this mob to breed.",
	"::java::server::world::entity::mob::breedable::Breedable.LoveCauseLeast": "Lower bits of the UUID of the player that caused this mob to breed.",
	"::java::server::world::entity::mob::breedable::Breedable.LoveCauseMost": "Upper bits of the UUID of the player that caused this mob to breed.",
	"::java::server::world::entity::mob::breedable::chicken::Chicken.EggLayTime": "Time until it lays another egg.",
	"::java::server::world::entity::mob::breedable::chicken::Chicken.IsChickenJockey": "Whether it is from a chicken jockey.\nIf true it will despawn and will drop more experience.",
	"::java::server::world::entity::mob::breedable::fox::Fox.Crouching": "Whether it is crouching.",
	"::java::server::world::entity::mob::breedable::fox::Fox.Sitting": "Whether it is sitting.",
	"::java::server::world::entity::mob::breedable::fox::Fox.Sleeping": "Whether it is sleeping.",
	"::java::server::world::entity::mob::breedable::fox::Fox.Trusted": "List of trusted players.",
	"::java::server::world::entity::mob::breedable::fox::Fox.TrustedUUIDs": "List of trusted players.",
	"::java::server::world::entity::mob::breedable::fox::Fox.Type": "The type of fox.",
	"::java::server::world::entity::mob::breedable::fox::TrustedUUID.L": "Lower bits of the trusted player's UUID.",
	"::java::server::world::entity::mob::breedable::fox::TrustedUUID.M": "Upper bits of the trusted player's UUID.",
	"::java::server::world::entity::mob::breedable::goat::Goat.HasLeftHorn": "Whether it has its left horn.",
	"::java::server::world::entity::mob::breedable::goat::Goat.HasRightHorn": "Whether it has its right horn.",
	"::java::server::world::entity::mob::breedable::goat::Goat.IsScreamingGoat": "Whether it is a screaming goat.",
	"::java::server::world::entity::mob::breedable::hoglin::Hoglin.CannotBeHunted": "Whether it cannot be hunted by piglins",
	"::java::server::world::entity::mob::breedable::hoglin::Hoglin.IsImmuneToZombification": "Whether it will not transform to a zoglin when it is in the Overword.",
	"::java::server::world::entity::mob::breedable::hoglin::Hoglin.TimeInOverworld": "The number of ticks it has been in the overworld.",
	"::java::server::world::entity::mob::breedable::horse::Camel.IsSitting": "Whether it is sitting.",
	"::java::server::world::entity::mob::breedable::horse::Camel.LastPoseTick": "The tick when it started changing its pose.",
	"::java::server::world::entity::mob::breedable::horse::ChestedHorse.ChestedHorse": "Whether it has a chest.",
	"::java::server::world::entity::mob::breedable::horse::ChestedHorse.Items": "Slots from 0 to 14.",
	"::java::server::world::entity::mob::breedable::horse::Horse.Variant": "Variant of the horse. Stored as `baseColor | (markings << 8)`.",
	"::java::server::world::entity::mob::breedable::horse::HorseBase.Bred": "Unknown use.\nRemains `0` even if it was bred.",
	"::java::server::world::entity::mob::breedable::horse::HorseBase.EatingHaystack": "Whether it is eating a haystack.",
	"::java::server::world::entity::mob::breedable::horse::HorseBase.Owner": "Player who tamed it.",
	"::java::server::world::entity::mob::breedable::horse::HorseBase.OwnerUUID": "Player who tamed it.",
	"::java::server::world::entity::mob::breedable::horse::HorseBase.Tame": "Whether it has been tamed.",
	"::java::server::world::entity::mob::breedable::horse::HorseBase.Temper": "Higher values make it easier to tame. Increases with feeding.",
	"::java::server::world::entity::mob::breedable::horse::SkeletonHorse.SkeletonTrap": "Whether it was spawned by a trap.",
	"::java::server::world::entity::mob::breedable::horse::SkeletonHorse.SkeletonTrapTime": "Ticks it has existed.",
	"::java::server::world::entity::mob::breedable::llama::Llama.Bred": "Unknown use.\nRemains `0` even if it was bred.",
	"::java::server::world::entity::mob::breedable::llama::Llama.ChestedHorse": "Whether it has a chest.",
	"::java::server::world::entity::mob::breedable::llama::Llama.DecorItem": "Carpet decoration on its back.",
	"::java::server::world::entity::mob::breedable::llama::Llama.EatingHaystack": "Whether it is grazing.",
	"::java::server::world::entity::mob::breedable::llama::Llama.Items": "List of slots, scales with `Strength`.",
	"::java::server::world::entity::mob::breedable::llama::Llama.Owner": "Player who tamed the horse.",
	"::java::server::world::entity::mob::breedable::llama::Llama.OwnerUUID": "Player who tamed it.",
	"::java::server::world::entity::mob::breedable::llama::Llama.Strength": "Determines both the number of items it can carry and how likely it is for wolves to run away.",
	"::java::server::world::entity::mob::breedable::llama::Llama.Tame": "Whether it has been tamed.",
	"::java::server::world::entity::mob::breedable::llama::Llama.Temper": "Higher values make it easier to tame.\nIncreases with feeding.",
	"::java::server::world::entity::mob::breedable::llama::TraderLlama.DespawnDelay": "When it will despawn.",
	"::java::server::world::entity::mob::breedable::mooshroom::Mooshroom.EffectDuration": "Duration of the suspicious stew effect.",
	"::java::server::world::entity::mob::breedable::mooshroom::Mooshroom.EffectId": "Effect that the mooshroom gives to suspicious stew.",
	"::java::server::world::entity::mob::breedable::ocelot::Ocelot.Trusting": "Whether it trusts players.",
	"::java::server::world::entity::mob::breedable::panda::Gene.Aggressive": "(dominant)",
	"::java::server::world::entity::mob::breedable::panda::Gene.Brown": "(recessive)",
	"::java::server::world::entity::mob::breedable::panda::Gene.Lazy": "(dominant)",
	"::java::server::world::entity::mob::breedable::panda::Gene.Normal": "(dominant)",
	"::java::server::world::entity::mob::breedable::panda::Gene.Playful": "(dominant)",
	"::java::server::world::entity::mob::breedable::panda::Gene.Weak": "(recessive)",
	"::java::server::world::entity::mob::breedable::panda::Gene.Worried": "(dominant)",
	"::java::server::world::entity::mob::breedable::panda::Panda.HiddenGene": "Hidden gene.",
	"::java::server::world::entity::mob::breedable::panda::Panda.MainGene": "Displayed gene.\nIf this gene is recessive and 'HiddenGene' is not the same, the panda will display the 'normal' gene.",
	"::java::server::world::entity::mob::breedable::rabbit::Rabbit.MoreCarrotTicks": "Ticks down once a carrot crop is eaten",
	"::java::server::world::entity::mob::breedable::saddled::Saddled.Saddle": "Whether there is a saddle on it.",
	"::java::server::world::entity::mob::breedable::sheep::Sheep.Sheared": "Whether it has been shorn.",
	"::java::server::world::entity::mob::breedable::tamable::Cat.CollarColor": "Collar color, present for stray cats.",
	"::java::server::world::entity::mob::breedable::tamable::Tamable.Sitting": "Whether the mob is sitting.",
	"::java::server::world::entity::mob::breedable::tamable::Wolf.Angry": "Whether it is angry.",
	"::java::server::world::entity::mob::breedable::tamable::Wolf.CollarColor": "Collar color, present for wild wolfs.",
	"::java::server::world::entity::mob::breedable::turtle::Turtle.HasEgg": "Whether it has an egg.",
	"::java::server::world::entity::mob::breedable::turtle::Turtle.TravelPosX": "X coordinate of its travel target.",
	"::java::server::world::entity::mob::breedable::turtle::Turtle.TravelPosY": "Y coordinate of its travel target.",
	"::java::server::world::entity::mob::breedable::turtle::Turtle.TravelPosZ": "Z coordinate of its travel target.",
	"::java::server::world::entity::mob::breedable::villager::Gossip.TargetLeast": "Lower bits of the gossip target's UUID.",
	"::java::server::world::entity::mob::breedable::villager::Gossip.TargetMost": "Upper bits of the gossip target's UUID.",
	"::java::server::world::entity::mob::breedable::villager::Offers.Recipes": "Trades it has to offer.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.buy": "First item it buys.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.buyB": "Second item it buys.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.demand": "Price adjuster of the first cost item based on demand.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.maxUses": "Maximum number of uses for this trade before it has to restock.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.priceMultiplier": "Multiplier on the demand price adjuster.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.rewardExp": "Whether it should reward experience for using this trade.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.sell": "Item it sells.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.specialPrice": "Modifier added to the original price of the first cost item.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.uses": "Times this trade has been used since it last restocked.",
	"::java::server::world::entity::mob::breedable::villager::Recipe.xp": "XP it gains from the trade.",
	"::java::server::world::entity::mob::breedable::villager::Villager.Gossips": "Gossips it has heard.",
	"::java::server::world::entity::mob::breedable::villager::Villager.LastGossipDecay": "Tick of the last time its gossips have decreased in strength.",
	"::java::server::world::entity::mob::breedable::villager::Villager.LastRestock": "Tick of the last time it has restocked.",
	"::java::server::world::entity::mob::breedable::villager::Villager.RestocksToday": "Times it has restocked in the past ten minutes.",
	"::java::server::world::entity::mob::breedable::villager::Villager.Xp": "XP it has, increases with trading.",
	"::java::server::world::entity::mob::breedable::villager::VillagerBase.Inventory": "Slots from 0 to 7.",
	"::java::server::world::entity::mob::breedable::villager::VillagerBase.Offers": "Trade offers it has.",
	"::java::server::world::entity::mob::breedable::villager::VillagerData.level": "Used for trading and badge rendering.",
	"::java::server::world::entity::mob::breedable::villager::WanderingTrader.DespawnDelay": "Ticks until it despawns.",
	"::java::server::world::entity::mob::breedable::villager::WanderingTrader.wander_target": "Where it is heading to.",
	"::java::server::world::entity::mob::breedable::villager::WanderingTrader.WanderTarget": "Where it is heading to.",
	"::java::server::world::entity::mob::creaking::Creaking.home_pos": "The creaking heart block that this is linked to.",
	"::java::server::world::entity::mob::creeper::Creeper.ExplosionRadius": "Radius of the explosion.",
	"::java::server::world::entity::mob::creeper::Creeper.Fuse": "Ticks until it explodes.",
	"::java::server::world::entity::mob::creeper::Creeper.ignited": "Whether it was lit with flint and steel.",
	"::java::server::world::entity::mob::creeper::Creeper.powered": "Whether it is being struck by lightning.",
	"::java::server::world::entity::mob::dolphin::Dolphin.GotFish": "Whether it has gotten fish from a player.",
	"::java::server::world::entity::mob::dolphin::Dolphin.Moistness": "Moistness level of the dolphin.\nSet to 2400 when the dolphin is in water or rain, otherwise decreases by 1 every tick.\nThe dolphin takes damage when level is at 0 or below.",
	"::java::server::world::entity::mob::dolphin::Dolphin.TreasurePosX": "X coordinate of the treasure it leads to.",
	"::java::server::world::entity::mob::dolphin::Dolphin.TreasurePosY": "Y coordinate of the treasure it leads to.",
	"::java::server::world::entity::mob::dolphin::Dolphin.TreasurePosZ": "Z coordinate of the treasure it leads to.",
	"::java::server::world::entity::mob::ender_dragon::EnderDragon.DragonPhase": "Fighting phase it is in.",
	"::java::server::world::entity::mob::enderman::Enderman.carriedBlockState": "Block it is carrying.",
	"::java::server::world::entity::mob::endermite::Endermite.Lifetime": "How long it has existed.",
	"::java::server::world::entity::mob::endermite::Endermite.PlayerSpawned": "Whether enderman should attack it.",
	"::java::server::world::entity::mob::fish::Fish.FromBucket": "If it was released from a bucket.",
	"::java::server::world::entity::mob::fish::Pufferfish.PuffState": "How puffed it is.",
	"::java::server::world::entity::mob::fish::Salmon.type": "The size variant of the salmon.",
	"::java::server::world::entity::mob::ghast::Ghast.ExplosionPower": "Explosion radius of fireballs that are shot from it.",
	"::java::server::world::entity::mob::glow_squid::GlowSquid.DarkTicksRemaining": "Ticks that it will wait before glowing.",
	"::java::server::world::entity::mob::iron_golem::IronGolem.PlayerCreated": "Whether a player created it.",
	"::java::server::world::entity::mob::LivingEntity.AbsorptionAmount": "How much absorption health it has.",
	"::java::server::world::entity::mob::LivingEntity.ActiveEffects": "Active potion effects",
	"::java::server::world::entity::mob::LivingEntity.DeathTime": "Timer since it was marked as dead. Counts down to zero.",
	"::java::server::world::entity::mob::LivingEntity.FallFlying": "Whether it will glide when it falls.",
	"::java::server::world::entity::mob::LivingEntity.HurtByTimestamp": "Ticks since it was last damaged, from its creation.",
	"::java::server::world::entity::mob::LivingEntity.HurtTime": "Timer since it has been damaged. Counts down to zero.",
	"::java::server::world::entity::mob::LivingEntity.NoAI": "Whether it should have an AI.",
	"::java::server::world::entity::mob::LivingEntity.SleepingX": "X coordinate of where it is sleeping.",
	"::java::server::world::entity::mob::LivingEntity.SleepingY": "Y coordinate of where it is sleeping.",
	"::java::server::world::entity::mob::LivingEntity.SleepingZ": "Z coordinate of where it is sleeping.",
	"::java::server::world::entity::mob::LivingEntity.Team": "Team to join when it is spawned.",
	"::java::server::world::entity::mob::MobBase": "Base NBT for all mobs.",
	"::java::server::world::entity::mob::MobBase.ArmorDropChances": "Chance to drop the items it is wearing, in [feet, legs, body, head].",
	"::java::server::world::entity::mob::MobBase.ArmorItems": "[feet, legs, body, head]",
	"::java::server::world::entity::mob::MobBase.body_armor_drop_chance": "Chance to drop the item it is wearing.",
	"::java::server::world::entity::mob::MobBase.body_armor_item": "Used for wolf armor & llama carpet decoration.",
	"::java::server::world::entity::mob::MobBase.CanPickUpLoot": "Whether it can pick up loot.",
	"::java::server::world::entity::mob::MobBase.DeathLootTableSeed": "Seed for generating the death loot table.",
	"::java::server::world::entity::mob::MobBase.drop_chances": "Chances of the mob dropping an equipment slot on deapth.",
	"::java::server::world::entity::mob::MobBase.HandDropChances": "Chance to drop the items it is holding, in [main hand, offhand].",
	"::java::server::world::entity::mob::MobBase.HandItems": "[main hand, offhand]",
	"::java::server::world::entity::mob::MobBase.leash": "What the leash is attached to.",
	"::java::server::world::entity::mob::MobBase.Leash": "What the leash is attached to.",
	"::java::server::world::entity::mob::MobBase.LeftHanded": "Whether it is left handed.",
	"::java::server::world::entity::mob::MobBase.PersistenceRequired": "Whether it should not despawn naturally.",
	"::java::server::world::entity::mob::NeutralMob.AngerTime": "Ticks that it will be angry for.",
	"::java::server::world::entity::mob::phantom::Phantom.AX": "Approximate circle x coordinate.",
	"::java::server::world::entity::mob::phantom::Phantom.AY": "Approximate circle y coordinate.",
	"::java::server::world::entity::mob::phantom::Phantom.AZ": "Approximate circle z coordinate.",
	"::java::server::world::entity::mob::piglin::Piglin.CannotHunt": "Whether it does not hunt hoglins.",
	"::java::server::world::entity::mob::piglin::Piglin.IsBaby": "Whether it is a baby.",
	"::java::server::world::entity::mob::piglin::PiglinBase.IsImmuneToZombification": "Whether it will not transform to a zombified piglin when it is in the Overworld.",
	"::java::server::world::entity::mob::piglin::PiglinBase.TimeInOverworld": "Ticks it has been in the overworld.",
	"::java::server::world::entity::mob::player::Abilities.flying": "Whether the player is flying.",
	"::java::server::world::entity::mob::player::Abilities.flySpeed": "Speed that the player flies at.",
	"::java::server::world::entity::mob::player::Abilities.instabuild": "Whether the player destroys blocks instantly.",
	"::java::server::world::entity::mob::player::Abilities.invulnerable": "Whether the player can only take damage from the void.",
	"::java::server::world::entity::mob::player::Abilities.mayBuild": "Whether the player may build.",
	"::java::server::world::entity::mob::player::Abilities.mayfly": "Whether the player can fly.",
	"::java::server::world::entity::mob::player::Abilities.walkSpeed": "Speed that the player walks at.",
	"::java::server::world::entity::mob::player::Player.abilities": "Abilities of the player.",
	"::java::server::world::entity::mob::player::Player.DataVersion": "Version of the player NBT structure",
	"::java::server::world::entity::mob::player::Player.ender_pearls": "Ender pearls thrown by this player.",
	"::java::server::world::entity::mob::player::Player.EnderItems": "The player's enderchest inventory.",
	"::java::server::world::entity::mob::player::Player.enteredNetherPosition": "Position that the player entered the nether at.",
	"::java::server::world::entity::mob::player::Player.foodExhaustionLevel": "Rate at which the `foodSaturationLevel` depletes.",
	"::java::server::world::entity::mob::player::Player.foodLevel": "Level of the hunger bar.",
	"::java::server::world::entity::mob::player::Player.foodSaturationLevel": "Rate at which the hunger bar depletes.",
	"::java::server::world::entity::mob::player::Player.foodTickTimer": "Ticks until the player heals or takes starvation damage.",
	"::java::server::world::entity::mob::player::Player.LastDeathLocation": "Location of the player's last death.",
	"::java::server::world::entity::mob::player::Player.playerGameType": "Game mode that the player is in.",
	"::java::server::world::entity::mob::player::Player.previousPlayerGameType": "Previous game mode that the player was in.",
	"::java::server::world::entity::mob::player::Player.recipeBook": "Recipes that the player has.",
	"::java::server::world::entity::mob::player::Player.RootVehicle": "Entity that the player is riding.",
	"::java::server::world::entity::mob::player::Player.Score": "Score to display upon death.",
	"::java::server::world::entity::mob::player::Player.seenCredits": "Whether the player has gone to the overworld after defeating the Ender Dragon.",
	"::java::server::world::entity::mob::player::Player.SelectedItem": "Item in the hotbar slot the player has selected.",
	"::java::server::world::entity::mob::player::Player.SelectedItemSlot": "Hotbar slot the player has selected.",
	"::java::server::world::entity::mob::player::Player.ShoulderEntityLeft": "Entity that is on the player's left shoulder.",
	"::java::server::world::entity::mob::player::Player.ShoulderEntityRight": "Entity that is on the player's right shoulder.",
	"::java::server::world::entity::mob::player::Player.SleepTimer": "Ticks the player has been in bed.",
	"::java::server::world::entity::mob::player::Player.SpawnAngle": "The Y-rotation of the player's respawn point.",
	"::java::server::world::entity::mob::player::Player.SpawnDimension": "Dimension of the player's respawn point.",
	"::java::server::world::entity::mob::player::Player.SpawnForced": "Whether the player must spawn at the spawn point.",
	"::java::server::world::entity::mob::player::Player.SpawnX": "X coordinate of the player's spawn point.",
	"::java::server::world::entity::mob::player::Player.SpawnY": "Y coordinate of the player's spawn point.",
	"::java::server::world::entity::mob::player::Player.SpawnZ": "Z coordinate of the player's spawn point.",
	"::java::server::world::entity::mob::player::Player.warden_spawn_tracker": "Tracking the warden spawning process for this player.",
	"::java::server::world::entity::mob::player::Player.XpLevel": "Number of experience levels the player has.",
	"::java::server::world::entity::mob::player::Player.XpP": "Percentage the experience bar is filled up.",
	"::java::server::world::entity::mob::player::Player.XpSeed": "Seed for enchantments.",
	"::java::server::world::entity::mob::player::Player.XpTotal": "Total experience the player has.",
	"::java::server::world::entity::mob::player::RecipeBook.isFilteringCraftable": "Whether the player has filtered crafting on in the crafting table.",
	"::java::server::world::entity::mob::player::RecipeBook.isFurnaceFilteringCraftable": "Whether the player has filtered crafting on in the furnace.",
	"::java::server::world::entity::mob::player::RecipeBook.isFurnaceGuiOpen": "Whether the player has the crafting book open in the furnace.",
	"::java::server::world::entity::mob::player::RecipeBook.isGuiOpen": "Whether the player has the crafting book open in the crafting table.",
	"::java::server::world::entity::mob::player::RecipeBook.recipes": "Recipes the player has acquired.",
	"::java::server::world::entity::mob::player::RecipeBook.toBeDisplayed": "Recipes that should pulse in the crafting book.",
	"::java::server::world::entity::mob::player::RootVehicle.Attach": "Ridden entity's UUID.",
	"::java::server::world::entity::mob::player::RootVehicle.AttachLeast": "Lower bits of the ridden entity's UUID.",
	"::java::server::world::entity::mob::player::RootVehicle.AttachMost": "Upper bits of the ridden entity's UUID.",
	"::java::server::world::entity::mob::player::RootVehicle.Entity": "The ridden entity.",
	"::java::server::world::entity::mob::player::WardenSpawnTracker.cooldown_ticks": "Ticks before the `warning_level` can be increased again.\nDecreases by 1 every tick. It is set to 200 game ticks (10 seconds) every time the warning level is increased.",
	"::java::server::world::entity::mob::player::WardenSpawnTracker.ticks_since_last_warning": "Ticks since the player was warned for warden spawning.\nIncreases by 1 every tick. After 12000 game ticks (10 minutes) it will be set back to 0,\nand the `warning_level` will be decreased by 1.",
	"::java::server::world::entity::mob::player::WardenSpawnTracker.warning_level": "The warden will spawn at level 3.",
	"::java::server::world::entity::mob::raider::RaiderBase.CanJoinRaid": "Whether the raider can join raids and count towards the progress bar.",
	"::java::server::world::entity::mob::raider::RaiderBase.patrol_target": "Where the raider is heading towards.",
	"::java::server::world::entity::mob::raider::RaiderBase.PatrolLeader": "Whether the raider is leading the patrol.",
	"::java::server::world::entity::mob::raider::RaiderBase.Patrolling": "Whether the raider is patrolling.",
	"::java::server::world::entity::mob::raider::RaiderBase.PatrolTarget": "Where the raider is heading towards.",
	"::java::server::world::entity::mob::raider::RaiderBase.RaidId": "Id of the raid that the raider is in.",
	"::java::server::world::entity::mob::raider::RaiderBase.Wave": "Wave that the raider is in.",
	"::java::server::world::entity::mob::raider::Ravager.AttackTick": "Ticks until it can attack.",
	"::java::server::world::entity::mob::raider::Ravager.RoarTick": "Ticks until it can roar.",
	"::java::server::world::entity::mob::raider::Ravager.StunTick": "Ticks it is stunned for.",
	"::java::server::world::entity::mob::raider::Spellcaster.SpellTicks": "Ticks until the raider can cast its spell.",
	"::java::server::world::entity::mob::raider::Vindicator.Johnny": "Whether it should try to attack most other mobs.",
	"::java::server::world::entity::mob::shulker::Shulker.APX": "Approximate x coordinate of the shulker.",
	"::java::server::world::entity::mob::shulker::Shulker.APY": "Approximate y coordinate of the shulker.",
	"::java::server::world::entity::mob::shulker::Shulker.APZ": "Approximate z coordinate of the shulker.",
	"::java::server::world::entity::mob::shulker::Shulker.AttachFace": "Which face it is attached to.",
	"::java::server::world::entity::mob::shulker::Shulker.Peek": "Whether it is peeking.",
	"::java::server::world::entity::mob::skeleton::Skeleton.StrayConversionTime": "Time until it converts to a stray.",
	"::java::server::world::entity::mob::slime::Slime.wasOnGround": "Whether it is on the ground.",
	"::java::server::world::entity::mob::snow_golem::SnowGolem.Pumpkin": "Whether it has a pumpkin.",
	"::java::server::world::entity::mob::tadpole::Tadpole.Age": "Age of it in ticks. When greater than or equal to 24000, it grows into a frog.",
	"::java::server::world::entity::mob::tadpole::Tadpole.FromBucket": "If it was released from a bucket.",
	"::java::server::world::entity::mob::UUIDLeash.UUIDLeast": "Lower bits of the other entity's UUID.",
	"::java::server::world::entity::mob::UUIDLeash.UUIDMost": "Upper bits of the other entity's UUID.",
	"::java::server::world::entity::mob::vex::Vex.BoundX": "X coordinate of the center of its wander bounds.",
	"::java::server::world::entity::mob::vex::Vex.BoundY": "Y coordinate of the center of its wander bounds.",
	"::java::server::world::entity::mob::vex::Vex.BoundZ": "Z coordinate of the center of its wander bounds.",
	"::java::server::world::entity::mob::vex::Vex.LifeTicks": "Ticks until it starts to die.",
	"::java::server::world::entity::mob::warden::AngerManagement.suspects": "Suspects that have angered the warden.",
	"::java::server::world::entity::mob::warden::Suspect.anger": "Level of anger that will decrease by 1 every second.",
	"::java::server::world::entity::mob::warden::Warden.anger": "Anger management",
	"::java::server::world::entity::mob::warden::Warden.listener": "Vibration listener",
	"::java::server::world::entity::mob::wither::Wither.Invul": "Ticks it is invulnerable for.",
	"::java::server::world::entity::mob::zoglin::Zoglin.IsBaby": "Whether it is a baby.",
	"::java::server::world::entity::mob::zombie::Zombie.CanBreakDoors": "Whether it can break doors.",
	"::java::server::world::entity::mob::zombie::Zombie.DrownedConversionTime": "Ticks until it converts.",
	"::java::server::world::entity::mob::zombie::Zombie.InWaterTime": "Ticks it has been in the water.",
	"::java::server::world::entity::mob::zombie::Zombie.IsBaby": "Whether it is a baby.",
	"::java::server::world::entity::mob::zombie::ZombieVillager.ConversionPlayer": "Player who triggered the conversion.",
	"::java::server::world::entity::mob::zombie::ZombieVillager.ConversionPlayerLeast": "Lower bits of the player's uuid who triggered the conversion.",
	"::java::server::world::entity::mob::zombie::ZombieVillager.ConversionPlayerMost": "Upper bits of the player's uuid who triggered the conversion.",
	"::java::server::world::entity::mob::zombie::ZombieVillager.ConversionTime": "Ticks until the it is converted.",
	"::java::server::world::entity::mob::zombie::ZombieVillager.Gossips": "Villager's gossips",
	"::java::server::world::entity::mob::zombie::ZombieVillager.Offers": "Villager's offers",
	"::java::server::world::entity::mob::zombie::ZombieVillager.VillagerData": "Villager's skin data",
	"::java::server::world::entity::mob::zombified_piglin::ZombiePigman.Anger": "Ticks that it will be angry for.",
	"::java::server::world::entity::mob::zombified_piglin::ZombiePigman.HurtBy": "Last player to hit a zombie pigman in this zombie pigman's detection range.",
	"::java::server::world::entity::mob::zombified_piglin::ZombiePigman.IsBaby": "Whether it is a baby.",
	"::java::server::world::entity::painting::Painting.Facing": "Direction it is facing.",
	"::java::server::world::entity::painting::Painting.Motive": "Type of painting.",
	"::java::server::world::entity::painting::Painting.variant": "Type of painting.",
	"::java::server::world::entity::projectile::arrow::Arrow.Color": "Color of the arrow's potion bubble trail particles.\ncalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::entity::projectile::arrow::Arrow.custom_potion_effects": "Effects to give to the hit entity.",
	"::java::server::world::entity::projectile::arrow::Arrow.CustomPotionEffects": "Effects to give to the hit entity.",
	"::java::server::world::entity::projectile::arrow::Arrow.Potion": "Name of the default potion effect.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.crit": "Whether it should do critical damage.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.damage": "Damage it should deal.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.inBlockState": "Block it is in.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.inGround": "Whether it is in the ground.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.life": "Ticks since it last moved.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.OwnerUUIDLeast": "Lower bits of the owner's UUID.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.OwnerUUIDMost": "Upper bits of the owner's UUID.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.pickup": "How players can pick up it.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.PierceLevel": "Number of entities it can pass through.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.player": "Whether a player shot it.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.shake": "Shake it creates.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.ShotFromCrossbow": "Whether it was shot from a crossbow.",
	"::java::server::world::entity::projectile::arrow::ArrowBase.SoundEvent": "Sound event to play when it hits something.\n\nCan only be vanilla sound events",
	"::java::server::world::entity::projectile::arrow::ArrowBase.weapon": "The item which has shot this arrow.",
	"::java::server::world::entity::projectile::arrow::SpectralArrow.Duration": "Ticks the glowing effect lasts.",
	"::java::server::world::entity::projectile::arrow::Trident.DealtDamage": "Whether it has already damaged an entity.",
	"::java::server::world::entity::projectile::fireball::AcceleratingProjectileBase.power": "Acceleration",
	"::java::server::world::entity::projectile::fireball::DespawnableProjectileBase.life": "Ticks since it last moved.",
	"::java::server::world::entity::projectile::fireball::FireballBase.Item": "Item it should render as.",
	"::java::server::world::entity::projectile::fireball::LargeFireball.ExplosionPower": "Explosion radius.",
	"::java::server::world::entity::projectile::OwnerUuid.OwnerUUIDLeast": "Lower bits of the owner's UUID.",
	"::java::server::world::entity::projectile::OwnerUuid.OwnerUUIDMost": "Upper bits of the owner's UUID.",
	"::java::server::world::entity::projectile::ProjectileBase.HasBeenShot": "Whether it has been shot. This is set to true when it exists for\nat least one tick, and is used by the game to ensure it only triggers the projectile_shoot\ngame event once.",
	"::java::server::world::entity::projectile::ProjectileBase.LeftOwner": "Whether it has left its owner.",
	"::java::server::world::entity::projectile::shulker_bullet::BulletTarget.L": "The lower bits of the its UUID.",
	"::java::server::world::entity::projectile::shulker_bullet::BulletTarget.M": "The upper bits of the its UUID.",
	"::java::server::world::entity::projectile::shulker_bullet::BulletTarget.X": "X block coordinate of the it.",
	"::java::server::world::entity::projectile::shulker_bullet::BulletTarget.Y": "Y block coordinate of the it.",
	"::java::server::world::entity::projectile::shulker_bullet::BulletTarget.Z": "Z block coordinate of the it.",
	"::java::server::world::entity::projectile::shulker_bullet::ShulkerBullet.Steps": "Steps it takes to reach the target",
	"::java::server::world::entity::projectile::shulker_bullet::ShulkerBullet.TXD": "X offset to move based on the target's location.",
	"::java::server::world::entity::projectile::shulker_bullet::ShulkerBullet.TYD": "Y offset to move based on the target's location.",
	"::java::server::world::entity::projectile::shulker_bullet::ShulkerBullet.TZD": "Z offset to move based on the target's location.",
	"::java::server::world::entity::projectile::throwable::Owner.L": "Lower bits of the owner's UUID.",
	"::java::server::world::entity::projectile::throwable::Owner.M": "Upper bits of the owner's UUID.",
	"::java::server::world::entity::projectile::throwable::Potion.Item": "Item representation of the potion.",
	"::java::server::world::entity::projectile::throwable::Potion.Potion": "Item representation of the potion.",
	"::java::server::world::entity::projectile::throwable::Throwable.inGround": "Whether it is in the ground.",
	"::java::server::world::entity::projectile::throwable::Throwable.owner": "Entity that threw it.",
	"::java::server::world::entity::projectile::throwable::Throwable.shake": "Shake it creates.",
	"::java::server::world::entity::projectile::throwable::ThrowableItem.Item": "Item representation of the projectile.",
	"::java::server::world::entity::tnt::Tnt.fuse": "Ticks until it explodes.",
	"::java::server::world::entity::tnt::Tnt.Fuse": "Ticks until it explodes.",
	"::java::server::world::item::AnyItem": "@deprecated",
	"::java::server::world::item::ApplyEffectsConsumeEffect.probability": "Chance the effects will be applied once consumed.",
	"::java::server::world::item::AttributeModifier": "A single attribute modifier.",
	"::java::server::world::item::AttributeModifier.amount": "Change in the attribute.",
	"::java::server::world::item::AttributeModifier.Amount": "Change in the attribute.",
	"::java::server::world::item::AttributeModifier.id": "Used when equipping and unequipping the item to identify which modifier to add or remove from the entity.",
	"::java::server::world::item::AttributeModifier.Name": "Identifying name of the modifier, has no real effect.",
	"::java::server::world::item::AttributeModifier.slot": "Slot or slot type the item must be in for the modifier to take effect. Defaults to `any`.",
	"::java::server::world::item::AttributeModifier.Slot": "Slot that the modifier is active in.",
	"::java::server::world::item::AttributeModifier.UUIDLeast": "Lower bits of the modifier's UUID.",
	"::java::server::world::item::AttributeModifier.UUIDMost": "Upper bits of the modifier's UUID.",
	"::java::server::world::item::block::BlockItem.BlockStateTag": "Blockstate that the placed block will have.",
	"::java::server::world::item::block::container::ContainerSlot.item": "The item stack in this container slot.",
	"::java::server::world::item::block::container::ContainerSlot.slot": "The slot ID of the container.",
	"::java::server::world::item::book::WrittenBook.generation": "Generation of the book.",
	"::java::server::world::item::book::WrittenBook.pages": "Pages of the book as JSON text components.",
	"::java::server::world::item::book::WrittenBook.resolved": "Whether the dynamic content on the pages has been resolved.",
	"::java::server::world::item::book::WrittenBookContent.generation": "Number of times this written book has been copied. Defaults to 0. If the value is greater than 1, the book cannot be copied.",
	"::java::server::world::item::book::WrittenBookContent.resolved": "Whether the dynamic content on the pages has been resolved.",
	"::java::server::world::item::compass::Compass.LodestoneTracked": "Whether the compass should be linked to a lodestone.\nWhen true, the compass will reset if the lodestone at the position is removed.",
	"::java::server::world::item::compass::LodestoneTarget.pos": "Coordinates.",
	"::java::server::world::item::compass::LodestoneTracker.target": "Location of the lodestone. Optional. If not set, the compass will spin randomly.",
	"::java::server::world::item::compass::LodestoneTracker.target.pos": "Coordinates.",
	"::java::server::world::item::compass::LodestoneTracker.tracked": "When `true`, the component is removed when the lodestone is broken. When `false`, the component is kept. Defaults to true.",
	"::java::server::world::item::Consumable.animation": "View model/arms animation used during consumption of the item. Defaults to `eat`.",
	"::java::server::world::item::Consumable.consume_seconds": "Time taken for a player to consume the item. Defaults to 1.6.",
	"::java::server::world::item::Consumable.has_consume_particles": "Whether the `item` particle is emitted while consuming the item. Defaults to `true`.",
	"::java::server::world::item::Consumable.on_consume_effects": "Side effects which take place after consuming the item.",
	"::java::server::world::item::Consumable.sound": "Sound played during and on completion of item consumption.",
	"::java::server::world::item::crossbow::Crossbow.Charged": "Whether the crossbow is charged.",
	"::java::server::world::item::crossbow::Crossbow.ChargedProjectiles": "Projectiles that are loaded.",
	"::java::server::world::item::DamageResistant.types": "The damage types which the item is resistant to when in entity form.\nAdditionally, this also affects whether the equipped item will be damaged when the wearer is hurt by a specified damage type.",
	"::java::server::world::item::DeathProtection.death_effects": "Effects applied when the item protects the holder.",
	"::java::server::world::item::Display": "Display settings of an item.",
	"::java::server::world::item::Display.Lore": "A list of JSON text components, each element being a lore line.",
	"::java::server::world::item::Display.Name": "A JSON text component.",
	"::java::server::world::item::Enchantment": "An individual enchantment, with ID and level.",
	"::java::server::world::item::Enchantment.id": "Which enchantment is being described.",
	"::java::server::world::item::Enchantment.lvl": "Which level the enchantment is.",
	"::java::server::world::item::Equippable.allowed_entities": "Limits which entities can equip this item",
	"::java::server::world::item::Equippable.camera_overlay": "The overlay texture that should render in first person when equipped.",
	"::java::server::world::item::Equippable.damage_on_hurt": "Whether the item will be damaged when the wearer is damaged. Defaults to `true`.",
	"::java::server::world::item::Equippable.dispensable": "Whether the item can be equipped by using a dispenser. Defaults to `true`.",
	"::java::server::world::item::Equippable.equip_sound": "Sound event to play when the item is equipped.\nIf not specified, the default armor equip sound will be played.",
	"::java::server::world::item::Equippable.model": "The equipment model to use when equipped.\nFalls back to rendering as the item itself when in the head slot (or no rendering if not applicable).",
	"::java::server::world::item::Equippable.swappable": "Whether the item can be equipped by right-clicking. Defaults to `true`.",
	"::java::server::world::item::firework::Explosion.colors": "Colors of the initial particles of the explosion, randomly selected from.\nCalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::firework::Explosion.fade_colors": "Colors of the fading particles of the explosion",
	"::java::server::world::item::firework::Explosion.has_trail": "Added to a firework star via Diamond.",
	"::java::server::world::item::firework::Explosion.has_twinkle": "Added to a firework star via Glowstone Dust.",
	"::java::server::world::item::firework::LegacyExplosion.Colors": "Colors of the explosion.\nCalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::firework::LegacyExplosion.FadeColors": "Colors of the explosion fade.\nCalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::firework::LegacyExplosion.Flicker": "Whether the explosion should flicker.",
	"::java::server::world::item::firework::LegacyExplosion.Trail": "Whether the explosion should have a trail.",
	"::java::server::world::item::firework::LegacyFireworks.Flight": "Duration of flight.",
	"::java::server::world::item::fish_bucket::AxolotlBucket.BucketVariantTag": "Turns into the `Variant` entity tag.",
	"::java::server::world::item::fish_bucket::BucketEntityData.BucketVariantTag": "Turns into the `Variant` entity tag for tropical fish.",
	"::java::server::world::item::fish_bucket::BucketEntityData.HuntingCooldown": "Turns into the expiry time of the memory module `has_hunting_cooldown` for axolotls.",
	"::java::server::world::item::Food.can_always_eat": "Whether the item can be eaten when the player's food points/haunches are full. Defaults to `false`",
	"::java::server::world::item::Food.eat_seconds": "Seconds it takes to eat the item. Defaults to `1.6`",
	"::java::server::world::item::Food.effects": "Applied when eaten.",
	"::java::server::world::item::Food.nutrition": "Food points/haunches restored when eaten (capped to 20.0).",
	"::java::server::world::item::Food.saturation": "Exact value added to the player's saturation level, capped at whatever the [new] food points value is.",
	"::java::server::world::item::Food.using_converts_to": "Works similarly to a milk bucket.",
	"::java::server::world::item::FoodEffect.probability": "Chance for the effect to be applied. Defaults to 1.",
	"::java::server::world::item::head::Profile.id": "UUID of the owner. Used to update the other tags when the chunk loads or the holder logs in, in case the owner's name has changed.",
	"::java::server::world::item::head::Profile.name": "Name of a player profile, i.e. its username.",
	"::java::server::world::item::head::Profile.properties": "Resolved textures hosted on the minecraft CDN.",
	"::java::server::world::item::head::ProfileProperty.name": "Usually `textures`.",
	"::java::server::world::item::head::ProfileProperty.signature": "Verifies the hash of the resulting texture.",
	"::java::server::world::item::head::ProfileProperty.value": "Base64 encoded JSON value of the texture index.",
	"::java::server::world::item::head::ProfilePropertyMap.[string]": "The key is usually `textures`.\nBase64 encoded JSON value of the texture index.",
	"::java::server::world::item::head::SkullOwner.Id": "Optional.",
	"::java::server::world::item::head::SkullOwner.Name": "Name of the owner, if missing appears as a steve head.",
	"::java::server::world::item::head::Texture.Value": "Base64 encoded JSON value of the texture index.",
	"::java::server::world::item::ItemBase.[string]": "Custom item NBT tags",
	"::java::server::world::item::ItemBase.AttributeModifiers": "Applied to an entity that has equipped the item.",
	"::java::server::world::item::ItemBase.CanDestroy": "List of the block states that can be destroyed by this item when holding it in adventure mode.",
	"::java::server::world::item::ItemBase.CanPlaceOn": "List of blockstates that this block item can be placed on.",
	"::java::server::world::item::ItemBase.CustomModelData": "Tag that describes the custom model an item will take.\nUsed by the `custom_model_data` model overrides predicate.\nHas certain restrictions due to float conversion.",
	"::java::server::world::item::ItemBase.Damage": "Damage that an item has. Only used for tools, armor, etc.",
	"::java::server::world::item::ItemBase.display": "Display settings.",
	"::java::server::world::item::ItemBase.Enchantments": "List of enchantments that are on the item.",
	"::java::server::world::item::ItemBase.HideFlags": "Bitfield for which flags to hide on an item.",
	"::java::server::world::item::ItemBase.RepairCost": "Number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.",
	"::java::server::world::item::ItemBase.Trim": "Trim to apply to the item & armor when worn.",
	"::java::server::world::item::ItemBase.Unbreakable": "Whether the item should be unbreakable.\nOnly used for tools, armor, etc.",
	"::java::server::world::item::ItemStack.count": "Number of items in the stack",
	"::java::server::world::item::ItemStack.Count": "Number of items in the stack",
	"::java::server::world::item::ItemUseAnimation.Spear": "Used for Tridents.",
	"::java::server::world::item::ItemUseAnimation.TootHorn": "Used for Goat Horns.",
	"::java::server::world::item::leather_armor::ColorDisplay.color": "Color of the armor.\nCalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::leather_armor::DyedColor.rgb": "Color of the armor.\nCalculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::map::ColorDisplay.MapColor": "Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::map::Decoration.rot": "Rotation of the decoration, measured in degrees clockwise.",
	"::java::server::world::item::map::Decoration.type": "Decoration type.",
	"::java::server::world::item::map::Decoration.x": "World x position.",
	"::java::server::world::item::map::Decoration.z": "World z position.",
	"::java::server::world::item::map::FilledMap.Decorations": "Decorations on the map.",
	"::java::server::world::item::map::FilledMap.Decorations.id": "An arbitrary unique string identifying the decoration.",
	"::java::server::world::item::map::FilledMap.display": "Display for the item.",
	"::java::server::world::item::map::FilledMap.display.MapColor": "Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::map::FilledMap.map": "Map number, representing the shared state holding map contents and markers.",
	"::java::server::world::item::map::FilledMap.map_scale_direction": "Amount to increase the current map scale by when crafting.",
	"::java::server::world::item::map::FilledMap.map_to_lock": "Whether the map should be locked after being taken out of the cartography table.",
	"::java::server::world::item::map::IconByteId.BlueMarker": "Blue pentagon.",
	"::java::server::world::item::map::IconByteId.Frame": "Green pentagon.",
	"::java::server::world::item::map::IconByteId.Mansion": "Woodland mansion.",
	"::java::server::world::item::map::IconByteId.Monument": "Ocean monument.",
	"::java::server::world::item::map::IconByteId.Player": "White pentagon.",
	"::java::server::world::item::map::IconByteId.PlayerOffLimits": "Small white dot.",
	"::java::server::world::item::map::IconByteId.PlayerOffMap": "Large white dot.",
	"::java::server::world::item::map::IconByteId.RedMarker": "Red pentagon.",
	"::java::server::world::item::map::IconByteId.TargetPoint": "Red triangle.",
	"::java::server::world::item::map::IconByteId.TargetX": "White x.",
	"::java::server::world::item::map::IdentifiedDecoration.id": "An arbitrary unique string identifying the decoration.",
	"::java::server::world::item::potion::EffectItem.custom_potion_effects": "List of the effects that will be applied with this item.",
	"::java::server::world::item::potion::EffectItem.CustomPotionColor": "Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::potion::EffectItem.CustomPotionEffects": "List of the effects that will be applied with this item.",
	"::java::server::world::item::potion::EffectItem.Potion": "Default potion effect",
	"::java::server::world::item::potion::PotionContents.custom_color": "Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.",
	"::java::server::world::item::potion::PotionContents.custom_name": "If present, is used to generate the item name using the translation key `item.minecraft.<potion_type>.effect.<custom_name>`.",
	"::java::server::world::item::Rarity.Common": "White name, or aqua when enchanted.",
	"::java::server::world::item::Rarity.Epic": "Light purple name.",
	"::java::server::world::item::Rarity.Rare": "Aqua name, or light purple when enchanted.",
	"::java::server::world::item::Rarity.Uncommon": "Yellow name, or aqua when enchanted.",
	"::java::server::world::item::shield::BlockEntityTag.Base": "Base color.",
	"::java::server::world::item::shield::Pattern.Color": "Color of the pattern.",
	"::java::server::world::item::shield::Pattern.Pattern": "Pattern id.",
	"::java::server::world::item::shield::Shield.BlockEntityTag": "Banner Data.",
	"::java::server::world::item::shield::Shield.BlockEntityTag.Base": "Base color.",
	"::java::server::world::item::SingleItem.id": "ID of the item.",
	"::java::server::world::item::spawn_item::SpawnItem.EntityTag": "Data of the spawned entity.",
	"::java::server::world::item::suspicious_stew::Effect": "A suspicious stew effect.",
	"::java::server::world::item::suspicious_stew::Effect.EffectDuration": "Duration in ticks.",
	"::java::server::world::item::suspicious_stew::SuspiciousStew.Effects": "Effects this stew will give.",
	"::java::server::world::item::suspicious_stew::SuspiciousStewEffect.duration": "Duration of the effect in ticks. Defaults to `160`; 8 seconds.",
	"::java::server::world::item::TeleportRandomlyConsumeEffect.diameter": "Defaults to 16.",
	"::java::server::world::item::Tool.can_destroy_blocks_in_creative": "If `false`, players cannot break blocks while holding this tool in creative mode. Defaults to `true`.",
	"::java::server::world::item::Tool.damage_per_block": "Amount of durability to remove each time a block is broken with this tool. Must be a non-negative integer.",
	"::java::server::world::item::Tool.default_mining_speed": "Used if no rules override it. Defaults to 1.0.",
	"::java::server::world::item::Tool.rules": "Blocks that this tool has a special behavior with.",
	"::java::server::world::item::ToolRule.correct_for_drops": "Overrides whether or not this tool is considered correct to mine at its most efficient speed, and to drop items if the block's loot table requires it.",
	"::java::server::world::item::ToolRule.speed": "Overrides the default mining speed.",
	"::java::server::world::item::Trim.material": "The trim material of this item..",
	"::java::server::world::item::Trim.pattern": "The trim pattern of this item.",
	"::java::server::world::item::UseCooldown.cooldown_group": "If present, this item will be part of a cooldown group and no longer share cooldowns with its base item type.\nInstead, cooldowns applied to this item will only be shared with any other items that are part of the same cooldown group.",
	"::java::server::world::item::UseCooldown.seconds": "Time the cooldown will last.",
	"::java::server::world::item::Weapon.can_disable_blocking": "If `true`, will disable a blocking Shield on successful attack. Defaults to `false`.",
	"::java::server::world::item::Weapon.damage_per_attack": "The amount to damage the weapon item for each attack performed."
}
